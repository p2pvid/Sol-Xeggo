{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nexport const WRAPPED_SOL_MINT = new PublicKey(\"So11111111111111111111111111111111111111112\");\nexport let TOKEN_PROGRAM_ID = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nexport let LENDING_PROGRAM_ID = new PublicKey(\"TokenLending1111111111111111111111111111111\");\nexport let SWAP_PROGRAM_ID = new PublicKey(\"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\");\nexport const PROGRAM_IDS = [{\n  name: \"mainnet-beta\"\n}, {\n  name: \"testnet\"\n}, {\n  name: \"devnet\"\n}, {\n  name: \"localnet\"\n}];\nexport const setProgramIds = envName => {\n  let instance = PROGRAM_IDS.find(env => env.name === envName);\n\n  if (!instance) {\n    return;\n  }\n};\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID\n  };\n};","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/utils/ids.ts"],"names":["PublicKey","WRAPPED_SOL_MINT","TOKEN_PROGRAM_ID","LENDING_PROGRAM_ID","SWAP_PROGRAM_ID","PROGRAM_IDS","name","setProgramIds","envName","instance","find","env","programIds","token"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,IAAID,SAAJ,CAC9B,6CAD8B,CAAzB;AAGP,OAAO,IAAIE,gBAAgB,GAAG,IAAIF,SAAJ,CAC5B,6CAD4B,CAAvB;AAIP,OAAO,IAAIG,kBAAkB,GAAG,IAAIH,SAAJ,CAC9B,6CAD8B,CAAzB;AAIP,OAAO,IAAII,eAAe,GAAG,IAAIJ,SAAJ,CAC3B,6CAD2B,CAAtB;AAIP,OAAO,MAAMK,WAAW,GAAG,CACzB;AACEC,EAAAA,IAAI,EAAE;AADR,CADyB,EAIzB;AACEA,EAAAA,IAAI,EAAE;AADR,CAJyB,EAOzB;AACEA,EAAAA,IAAI,EAAE;AADR,CAPyB,EAUzB;AACEA,EAAAA,IAAI,EAAE;AADR,CAVyB,CAApB;AAeP,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAqB;AAChD,MAAIC,QAAQ,GAAGJ,WAAW,CAACK,IAAZ,CAAkBC,GAAD,IAASA,GAAG,CAACL,IAAJ,KAAaE,OAAvC,CAAf;;AACA,MAAI,CAACC,QAAL,EAAe;AACb;AACD;AACF,CALM;AAOP,OAAO,MAAMG,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLC,IAAAA,KAAK,EAAEX;AADF,GAAP;AAGD,CAJM","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nexport let TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport let LENDING_PROGRAM_ID = new PublicKey(\n  \"TokenLending1111111111111111111111111111111\"\n);\n\nexport let SWAP_PROGRAM_ID = new PublicKey(\n  \"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\"\n);\n\nexport const PROGRAM_IDS = [\n  {\n    name: \"mainnet-beta\",\n  },\n  {\n    name: \"testnet\",\n  },\n  {\n    name: \"devnet\",\n  },\n  {\n    name: \"localnet\",\n  },\n];\n\nexport const setProgramIds = (envName: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\n  if (!instance) {\n    return;\n  }\n};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}