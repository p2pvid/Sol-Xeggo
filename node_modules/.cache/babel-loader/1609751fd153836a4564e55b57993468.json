{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\nclass Wallet extends EventEmitter {\n  constructor(provider, network) {\n    var _this;\n\n    super();\n    _this = this;\n\n    this._handleMessage = e => {\n      if (this._injectedProvider && e.source === window || e.origin === this._providerUrl.origin && e.source === this._popup) {\n        if (e.data.method === 'connected') {\n          const newPublicKey = new PublicKey(e.data.params.publicKey);\n\n          if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n            if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n              this._handleDisconnect();\n            }\n\n            this._publicKey = newPublicKey;\n            this._autoApprove = !!e.data.params.autoApprove;\n            this.emit('connect', this._publicKey);\n          }\n        } else if (e.data.method === 'disconnected') {\n          this._handleDisconnect();\n        } else if (e.data.result || e.data.error) {\n          if (this._responsePromises.has(e.data.id)) {\n            const [resolve, reject] = this._responsePromises.get(e.data.id);\n\n            if (e.data.result) {\n              resolve(e.data.result);\n            } else {\n              reject(new Error(e.data.error));\n            }\n          }\n        }\n      }\n    };\n\n    this._handleConnect = () => {\n      if (!this._handlerAdded) {\n        this._handlerAdded = true;\n        window.addEventListener('message', this._handleMessage);\n        window.addEventListener('beforeunload', this.disconnect);\n      }\n\n      if (this._injectedProvider) {\n        return new Promise(resolve => {\n          this._sendRequest('connect', {});\n\n          resolve();\n        });\n      } else {\n        window.name = 'parent';\n        this._popup = window.open(this._providerUrl.toString(), '_blank', 'location,resizable,width=460,height=675');\n        return new Promise(resolve => {\n          this.once('connect', resolve);\n        });\n      }\n    };\n\n    this._handleDisconnect = () => {\n      if (this._handlerAdded) {\n        this._handlerAdded = false;\n        window.removeEventListener('message', this._handleMessage);\n        window.removeEventListener('beforeunload', this.disconnect);\n      }\n\n      if (this._publicKey) {\n        this._publicKey = null;\n        this.emit('disconnect');\n      }\n\n      this._responsePromises.forEach(([resolve, reject], id) => {\n        this._responsePromises.delete(id);\n\n        reject('Wallet disconnected');\n      });\n    };\n\n    this._sendRequest = async function (method, params) {\n      if (method !== 'connect' && !_this.connected) {\n        throw new Error('Wallet not connected');\n      }\n\n      const requestId = _this._nextRequestId;\n      ++_this._nextRequestId;\n      return new Promise((resolve, reject) => {\n        _this._responsePromises.set(requestId, [resolve, reject]);\n\n        if (_this._injectedProvider) {\n          _this._injectedProvider.postMessage({\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params: {\n              network: _this._network,\n              ...params\n            }\n          });\n        } else {\n          _this._popup.postMessage({\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params\n          }, _this._providerUrl.origin);\n\n          if (!_this.autoApprove) {\n            _this._popup.focus();\n          }\n        }\n      });\n    };\n\n    this.connect = () => {\n      if (this._popup) {\n        this._popup.close();\n      }\n\n      return this._handleConnect();\n    };\n\n    this.disconnect = async function () {\n      if (_this._injectedProvider) {\n        await _this._sendRequest('disconnect', {});\n      }\n\n      if (_this._popup) {\n        _this._popup.close();\n      }\n\n      _this._handleDisconnect();\n    };\n\n    this.sign = async function (data, display) {\n      if (!(data instanceof Uint8Array)) {\n        throw new Error('Data must be an instance of Uint8Array');\n      }\n\n      const response = await _this._sendRequest('sign', {\n        data,\n        display\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      return {\n        signature,\n        publicKey\n      };\n    };\n\n    this.signTransaction = async function (transaction) {\n      const response = await _this._sendRequest('signTransaction', {\n        message: bs58.encode(transaction.serializeMessage())\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      transaction.addSignature(publicKey, signature);\n      return transaction;\n    };\n\n    this.signAllTransactions = async function (transactions) {\n      const response = await _this._sendRequest('signAllTransactions', {\n        messages: transactions.map(tx => bs58.encode(tx.serializeMessage()))\n      });\n      const signatures = response.signatures.map(s => bs58.decode(s));\n      const publicKey = new PublicKey(response.publicKey);\n      transactions = transactions.map((tx, idx) => {\n        tx.addSignature(publicKey, signatures[idx]);\n        return tx;\n      });\n      return transactions;\n    };\n\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network\n      }).toString();\n    } else {\n      throw new Error('provider parameter must be an injected provider or a URL string.');\n    }\n\n    this._network = network;\n    this._publicKey = null;\n    this._autoApprove = false;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._responsePromises = new Map();\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return this._autoApprove;\n  }\n\n}\n\nfunction isString(a) {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a) {\n  return isObject(a) && isFunction(a.postMessage);\n}\n\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\n\nfunction isFunction(a) {\n  return typeof a === 'function';\n}\n\nexport default Wallet;","map":{"version":3,"sources":["../src/index.js"],"names":["constructor","isInjectedProvider","isString","origin","window","network","e","newPublicKey","resolve","reject","method","requestId","jsonrpc","id","params","data","response","display","signature","bs58","publicKey","message","transaction","messages","transactions","tx","signatures","s","isObject","isFunction","a"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\nexport default class Wallet extends EventEmitter {\n  constructor(provider, network) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n    this._network = network;\n    this._publicKey = null;\n    this._autoApprove = false;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._responsePromises = new Map();\n  }\n\n  _handleMessage = (e) => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this._handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this._handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        if (this._responsePromises.has(e.data.id)) {\n          const [resolve, reject] = this._responsePromises.get(e.data.id);\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  _handleConnect = () => {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this._handleMessage);\n      window.addEventListener('beforeunload', this.disconnect);\n    }\n    if (this._injectedProvider) {\n      return new Promise((resolve) => {\n        this._sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  };\n\n  _handleDisconnect = () => {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this._handleMessage);\n      window.removeEventListener('beforeunload', this.disconnect);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([resolve, reject], id) => {\n      this._responsePromises.delete(id);\n      reject('Wallet disconnected');\n    });\n  };\n\n  _sendRequest = async (method, params) => {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl.origin,\n        );\n\n        if (!this.autoApprove) {\n          this._popup.focus();\n        }\n      }\n    });\n  };\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return this._autoApprove;\n  }\n\n  connect = () => {\n    if (this._popup) {\n      this._popup.close();\n    }\n    return this._handleConnect();\n  };\n\n  disconnect = async () => {\n    if (this._injectedProvider) {\n      await this._sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this._handleDisconnect();\n  };\n\n  sign = async (data, display) => {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = await this._sendRequest('sign', {\n      data,\n      display,\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  };\n\n  signTransaction = async (transaction) => {\n    const response = await this._sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  };\n\n  signAllTransactions = async (transactions) => {\n    const response = await this._sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    });\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  };\n}\n\nfunction isString(a) {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a) {\n  return isObject(a) && isFunction(a.postMessage);\n}\n\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\n\nfunction isFunction(a) {\n  return typeof a === 'function';\n}\n"]},"metadata":{},"sourceType":"module"}