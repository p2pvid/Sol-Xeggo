{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { notify } from \"../../utils/notifications\";\nexport class PhantomWalletAdapter extends EventEmitter {\n  constructor() {\n    super();\n\n    this._handleConnect = (...args) => {\n      this.emit('connect', ...args);\n    };\n\n    this._handleDisconnect = (...args) => {\n      this.emit('disconnect', ...args);\n    };\n\n    this.connect = this.connect.bind(this);\n  }\n\n  get _provider() {\n    var _ref, _ref$solana;\n\n    if ((_ref = window) === null || _ref === void 0 ? void 0 : (_ref$solana = _ref.solana) === null || _ref$solana === void 0 ? void 0 : _ref$solana.isPhantom) {\n      return window.solana;\n    }\n\n    return undefined;\n  }\n\n  get connected() {\n    var _this$_provider;\n\n    return ((_this$_provider = this._provider) === null || _this$_provider === void 0 ? void 0 : _this$_provider.isConnected) || false;\n  }\n\n  get autoApprove() {\n    var _this$_provider2;\n\n    return ((_this$_provider2 = this._provider) === null || _this$_provider2 === void 0 ? void 0 : _this$_provider2.autoApprove) || false;\n  } // eslint-disable-next-line\n\n\n  async signAllTransactions(transactions) {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  get publicKey() {\n    var _this$_provider3;\n\n    return (_this$_provider3 = this._provider) === null || _this$_provider3 === void 0 ? void 0 : _this$_provider3.publicKey;\n  } // eslint-disable-next-line\n\n\n  async signTransaction(transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  connect() {\n    var _this$_provider6;\n\n    if (!this._provider) {\n      return;\n    }\n\n    if (!window.solana.isPhantom) {\n      notify({\n        message: \"Phantom Error\",\n        description: \"Please install Phantom wallet from Chrome \"\n      });\n      return;\n    }\n\n    if (this._provider && !this._provider.listeners('connect').length) {\n      var _this$_provider4;\n\n      (_this$_provider4 = this._provider) === null || _this$_provider4 === void 0 ? void 0 : _this$_provider4.on('connect', this._handleConnect);\n    }\n\n    if (!this._provider.listeners('disconnect').length) {\n      var _this$_provider5;\n\n      (_this$_provider5 = this._provider) === null || _this$_provider5 === void 0 ? void 0 : _this$_provider5.on('disconnect', this._handleDisconnect);\n    }\n\n    return (_this$_provider6 = this._provider) === null || _this$_provider6 === void 0 ? void 0 : _this$_provider6.connect();\n  }\n\n  disconnect() {\n    if (this._provider) {\n      this._provider.disconnect();\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/wallet-adapters/phantom/index.tsx"],"names":["EventEmitter","notify","PhantomWalletAdapter","constructor","_handleConnect","args","emit","_handleDisconnect","connect","bind","_provider","window","solana","isPhantom","undefined","connected","isConnected","autoApprove","signAllTransactions","transactions","publicKey","signTransaction","transaction","message","description","listeners","length","on","disconnect"],"mappings":"AACA,OAAOA,YAAP,MAAyB,eAAzB;AAEA,SAASC,MAAT,QAAuB,2BAAvB;AAkBA,OAAO,MAAMC,oBAAN,SAAmCF,YAAnC,CAAyE;AAE9EG,EAAAA,WAAW,GAAG;AACZ;;AADY,SAYNC,cAZM,GAYW,CAAC,GAAGC,IAAJ,KAAkB;AACzC,WAAKC,IAAL,CAAU,SAAV,EAAqB,GAAGD,IAAxB;AACD,KAda;;AAAA,SAgBNE,iBAhBM,GAgBc,CAAC,GAAGF,IAAJ,KAAkB;AAC5C,WAAKC,IAAL,CAAU,YAAV,EAAwB,GAAGD,IAA3B;AACD,KAlBa;;AAEZ,SAAKG,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAED,MAAYC,SAAZ,GAAqD;AAAA;;AACnD,gBAAKC,MAAL,wDAAI,KAAiBC,MAArB,gDAAI,YAAyBC,SAA7B,EAAwC;AACtC,aAAQF,MAAD,CAAgBC,MAAvB;AACD;;AACD,WAAOE,SAAP;AACD;;AAUD,MAAIC,SAAJ,GAAgB;AAAA;;AACd,WAAO,yBAAKL,SAAL,oEAAgBM,WAAhB,KAA+B,KAAtC;AACD;;AAED,MAAIC,WAAJ,GAAkB;AAAA;;AAChB,WAAO,0BAAKP,SAAL,sEAAgBO,WAAhB,KAA+B,KAAtC;AACD,GA5B6E,CA8B9E;;;AACA,QAAMC,mBAAN,CAA0BC,YAA1B,EAA+E;AAC7E,QAAI,CAAC,KAAKT,SAAV,EAAqB;AACnB,aAAOS,YAAP;AACD;;AAED,WAAO,KAAKT,SAAL,CAAeQ,mBAAf,CAAmCC,YAAnC,CAAP;AACD;;AAED,MAAIC,SAAJ,GAAgB;AAAA;;AACd,+BAAO,KAAKV,SAAZ,qDAAO,iBAAgBU,SAAvB;AACD,GAzC6E,CA2C9E;;;AACA,QAAMC,eAAN,CAAsBC,WAAtB,EAAgD;AAC9C,QAAI,CAAC,KAAKZ,SAAV,EAAqB;AACnB,aAAOY,WAAP;AACD;;AAED,WAAO,KAAKZ,SAAL,CAAeW,eAAf,CAA+BC,WAA/B,CAAP;AACD;;AAEDd,EAAAA,OAAO,GAAG;AAAA;;AACR,QAAI,CAAC,KAAKE,SAAV,EAAqB;AACnB;AACD;;AAED,QAAI,CAAGC,MAAD,CAAgBC,MAAhB,CAAuBC,SAA7B,EAAyC;AAEvCZ,MAAAA,MAAM,CAAC;AACLsB,QAAAA,OAAO,EAAE,eADJ;AAELC,QAAAA,WAAW,EAAE;AAFR,OAAD,CAAN;AAIA;AACD;;AAGD,QAAI,KAAKd,SAAL,IAAkB,CAAC,KAAKA,SAAL,CAAee,SAAf,CAAyB,SAAzB,EAAoCC,MAA3D,EAAmE;AAAA;;AACjE,+BAAKhB,SAAL,sEAAgBiB,EAAhB,CAAmB,SAAnB,EAA8B,KAAKvB,cAAnC;AACD;;AACD,QAAI,CAAC,KAAKM,SAAL,CAAee,SAAf,CAAyB,YAAzB,EAAuCC,MAA5C,EAAoD;AAAA;;AAChD,+BAAKhB,SAAL,sEAAgBiB,EAAhB,CAAmB,YAAnB,EAAiC,KAAKpB,iBAAtC;AACH;;AACD,+BAAO,KAAKG,SAAZ,qDAAO,iBAAgBF,OAAhB,EAAP;AACD;;AAEDoB,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKlB,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAekB,UAAf;AACD;AACF;;AAhF6E","sourcesContent":["import { WalletAdapter } from \"../../contexts/wallet\";\nimport EventEmitter from 'eventemitter3'\nimport { PublicKey, Transaction } from '@solana/web3.js'\nimport { notify } from \"../../utils/notifications\";\n\ntype PhantomEvent = 'disconnect' | 'connect'\ntype PhantomRequestMethod = 'connect' | 'disconnect' | 'signTransaction' | 'signAllTransactions'\n\ninterface PhantomProvider {\n  publicKey?: PublicKey\n  isConnected?: boolean\n  autoApprove?: boolean\n  signTransaction: (transaction: Transaction) => Promise<Transaction>\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>\n  connect: () => Promise<void>\n  disconnect: () => Promise<void>\n  on: (event: PhantomEvent, handler: (args: any) => void) => void\n  request: (method: PhantomRequestMethod, params: any) => Promise<any>\n  listeners: (event: PhantomEvent) => (() => void)[]\n}\n\nexport class PhantomWalletAdapter extends EventEmitter implements WalletAdapter {\n\n  constructor() {\n    super()\n    this.connect = this.connect.bind(this)\n  }\n\n  private get _provider(): PhantomProvider | undefined {\n    if ((window as any)?.solana?.isPhantom) {\n      return (window as any).solana\n    }\n    return undefined\n  }\n\n  private _handleConnect = (...args: any) => {\n    this.emit('connect', ...args)\n  }\n\n  private _handleDisconnect = (...args: any) => {\n    this.emit('disconnect', ...args)\n  }\n\n  get connected() {\n    return this._provider?.isConnected || false\n  }\n\n  get autoApprove() {\n    return this._provider?.autoApprove || false\n  }\n\n  // eslint-disable-next-line\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    if (!this._provider) {\n      return transactions\n    }\n\n    return this._provider.signAllTransactions(transactions)\n  }\n\n  get publicKey() {\n    return this._provider?.publicKey!\n  }\n\n  // eslint-disable-next-line\n  async signTransaction(transaction: Transaction) {\n    if (!this._provider) {\n      return transaction\n    }\n\n    return this._provider.signTransaction(transaction)\n  }\n\n  connect() {\n    if (!this._provider) {\n      return\n    }\n\n    if (!((window as any).solana.isPhantom)) {\n      \n      notify({\n        message: \"Phantom Error\",\n        description: \"Please install Phantom wallet from Chrome \",\n      });\n      return;\n    }\n\n\n    if (this._provider && !this._provider.listeners('connect').length) {\n      this._provider?.on('connect', this._handleConnect)\n    }\n    if (!this._provider.listeners('disconnect').length) {\n        this._provider?.on('disconnect', this._handleDisconnect)\n    }\n    return this._provider?.connect()\n  }\n\n  disconnect() {\n    if (this._provider) {\n      this._provider.disconnect()\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}