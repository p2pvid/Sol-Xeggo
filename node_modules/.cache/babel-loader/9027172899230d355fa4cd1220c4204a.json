{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport * as nacl from 'tweetnacl';\nimport nacl__default from 'tweetnacl';\nimport { Buffer, isBuffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from 'crypto-hash';\nimport * as BufferLayout from 'buffer-layout';\nimport fetch from 'node-fetch';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport { keccak_256 } from 'js-sha3';\n\nconst toBuffer = arr => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n/**\n * Maximum length of derived pubkey seed\n */\n\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * A public key\n */\n\nclass PublicKey {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    _defineProperty(this, \"_bn\", void 0);\n\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n\n      if (decoded.length != 32) {\n        throw new Error(\"Invalid public key input\");\n      }\n\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(\"Invalid public key input\");\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n\n  static async createProgramAddress(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new Error(\"Max seed length exceeded\");\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(\"Invalid seeds, address must fall off the curve\");\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(\"Unable to find a viable program address nonce\");\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkey) {\n    return is_on_curve(pubkey) == 1;\n  }\n\n} // @ts-ignore\n\n\n_defineProperty(PublicKey, \"default\", new PublicKey('11111111111111111111111111111111'));\n\nlet naclLowLevel = nacl__default.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n */\n\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    _defineProperty(this, \"_keypair\", void 0);\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\nvar global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\nvar inherits;\n\nif (typeof Object.create === 'function') {\n  inherits = function inherits(ctor, superCtor) {\n    // implementation from standard node.js 'util' module\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  inherits = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n\n    var TempCtor = function () {};\n\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  };\n}\n\nvar inherits$1 = inherits;\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect$1(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  }; // legacy...\n\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  } // set default options\n\n\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n} // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\n\ninspect$1.colors = {\n  'bold': [1, 22],\n  'italic': [3, 23],\n  'underline': [4, 24],\n  'inverse': [7, 27],\n  'white': [37, 39],\n  'grey': [90, 39],\n  'black': [30, 39],\n  'blue': [34, 39],\n  'cyan': [36, 39],\n  'green': [32, 39],\n  'magenta': [35, 39],\n  'red': [31, 39],\n  'yellow': [33, 39]\n}; // Don't use 'blue' not visible on cmd.exe\n\ninspect$1.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect$1.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect$1.colors[style][0] + 'm' + str + '\\u001b[' + inspect$1.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n  array.forEach(function (val, idx) {\n    hash[val] = true;\n  });\n  return hash;\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n  value.inspect !== inspect$1 && // Also filter out any prototype objects using the circular check.\n  !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n\n    return ret;\n  } // Primitive types cannot have properties\n\n\n  var primitive = formatPrimitive(ctx, value);\n\n  if (primitive) {\n    return primitive;\n  } // Look up the keys of the object.\n\n\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  } // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\n\n  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  } // Some type of object without properties can be shortcutted.\n\n\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '',\n      array = false,\n      braces = ['{', '}']; // Make Array say that they are Array\n\n  if (isArray$1(value)) {\n    array = true;\n    braces = ['[', ']'];\n  } // Make functions say that they are functions\n\n\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  } // Make RegExps say that they are RegExps\n\n\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  } // Make dates with properties first say the date\n\n\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  } // Make error with message first say the error\n\n\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n  var output;\n\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function (key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');\n\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n\n  if (isNumber(value)) return ctx.stylize('' + value, 'number');\n  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is \"object\", so special case here.\n\n  if (isNull(value)) return ctx.stylize('null', 'null');\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty$1(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function (key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || {\n    value: value[key]\n  };\n\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n\n  if (!hasOwnProperty$1(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function (line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function (line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n\n    name = JSON.stringify('' + key);\n\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function (prev, cur) {\n    if (cur.indexOf('\\n') >= 0) ;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] + (base === '' ? '' : base + '\\n ') + ' ' + output.join(',\\n  ') + ' ' + braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n} // NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\n\nfunction isArray$1(ar) {\n  return Array.isArray(ar);\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isPrimitive(arg) {\n  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol\n  typeof arg === 'undefined';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n  var keys = Object.keys(add);\n  var i = keys.length;\n\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n\n  return origin;\n}\n\nfunction hasOwnProperty$1(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n\n  if (y < x) {\n    return 1;\n  }\n\n  return 0;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar objectKeys$1 = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n\n  return keys;\n};\n\nvar pSlice = Array.prototype.slice;\n\nvar _functionsHaveNames;\n\nfunction functionsHaveNames() {\n  if (typeof _functionsHaveNames !== 'undefined') {\n    return _functionsHaveNames;\n  }\n\n  return _functionsHaveNames = function () {\n    return function foo() {}.name === 'foo';\n  }();\n}\n\nfunction pToString(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n\n  if (typeof global$1.ArrayBuffer !== 'function') {\n    return false;\n  }\n\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n\n  if (!arrbuf) {\n    return false;\n  }\n\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n\n  return false;\n} // 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\n\nfunction assert(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n} // 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\n\nfunction getName(func) {\n  if (!isFunction(func)) {\n    return;\n  }\n\n  if (functionsHaveNames()) {\n    return func.name;\n  }\n\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\n\nassert.AssertionError = AssertionError;\n\nfunction AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n\n  var stackStartFunction = options.stackStartFunction || fail;\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n\n    if (err.stack) {\n      var out = err.stack; // try to strip useless frames\n\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n} // assert.AssertionError instanceof Error\n\n\ninherits$1(AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\n\nfunction inspect(something) {\n  if (functionsHaveNames() || !isFunction(something)) {\n    return inspect$1(something);\n  }\n\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' + name + ']';\n}\n\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);\n} // At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n} // EXTENSION! allows for well behaved errors defined elsewhere.\n\n\nassert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\n\nassert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = equal;\n\nfunction equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', equal);\n} // 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\n\nassert.notEqual = notEqual;\n\nfunction notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', notEqual);\n  }\n} // 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\n\nassert.deepEqual = deepEqual;\n\nfunction deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', deepEqual);\n  }\n}\n\nassert.deepStrictEqual = deepStrictEqual;\n\nfunction deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);\n  }\n}\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is\n    // equivalent if it is also a Date object that refers to the same time.\n  } else if (isDate(actual) && isDate(expected)) {\n    return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is\n    // equivalent if it is also a RegExp object with the same source and\n    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (isRegExp(actual) && isRegExp(expected)) {\n    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',\n    // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying\n    // ArrayBuffers in a Buffer each to increase performance\n    // This optimization requires the arrays to have the same type as checked by\n    // Object.prototype.toString (aka pToString). Never perform binary\n    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n    // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is\n    // determined by having the same number of owned properties (as verified\n    // with Object.prototype.hasOwnProperty.call), the same set of keys\n    // (although not necessarily the same order), equivalent values for every\n    // corresponding key, and an identical 'prototype' property. Note: this\n    // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {\n      actual: [],\n      expected: []\n    };\n    var actualIndex = memos.actual.indexOf(actual);\n\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same\n\n  if (isPrimitive(a) || isPrimitive(b)) return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;\n\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n\n  var ka = objectKeys$1(a);\n  var kb = objectKeys$1(b);\n  var key, i; // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n\n  if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),\n\n  ka.sort();\n  kb.sort(); //~~~cheap key test\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i]) return false;\n  } //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;\n  }\n\n  return true;\n} // 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\n\nassert.notDeepEqual = notDeepEqual;\n\nfunction notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);\n  }\n}\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\n\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n} // 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\n\nassert.strictEqual = strictEqual;\n\nfunction strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', strictEqual);\n  }\n} // 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\n\nassert.notStrictEqual = notStrictEqual;\n\nfunction notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', notStrictEqual);\n  }\n}\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {\n    throw actual;\n  }\n} // 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\n\nassert.throws = throws;\n\nfunction throws(block,\n/*optional*/\nerror,\n/*optional*/\nmessage) {\n  _throws(true, block, error, message);\n} // EXTENSION! This is annoying to write outside this module.\n\n\nassert.doesNotThrow = doesNotThrow;\n\nfunction doesNotThrow(block,\n/*optional*/\nerror,\n/*optional*/\nmessage) {\n  _throws(false, block, error, message);\n}\n\nassert.ifError = ifError;\n\nfunction ifError(err) {\n  if (err) throw err;\n}\n/**\n * Layout for a public key\n */\n\n\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rsl;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    _defineProperty(this, \"header\", void 0);\n\n    _defineProperty(this, \"accountKeys\", void 0);\n\n    _defineProperty(this, \"recentBlockhash\", void 0);\n\n    _defineProperty(this, \"instructions\", void 0);\n\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = bs58.decode(instruction.data);\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n/**\n * Transaction signature as base-58 encoded string\n */\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\n\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    _defineProperty(this, \"keys\", void 0);\n\n    _defineProperty(this, \"programId\", void 0);\n\n    _defineProperty(this, \"data\", Buffer.alloc(0));\n\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    _defineProperty(this, \"signatures\", []);\n\n    _defineProperty(this, \"feePayer\", void 0);\n\n    _defineProperty(this, \"instructions\", []);\n\n    _defineProperty(this, \"recentBlockhash\", void 0);\n\n    _defineProperty(this, \"nonceInfo\", void 0);\n\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    const {\n      nonceInfo\n    } = this;\n\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n\n    const {\n      recentBlockhash\n    } = this;\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable = x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n\n    this._verifySignatures(message.serialize(), true);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl__default.sign.detached(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl__default.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, \"signature has invalid length\");\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message, signatures) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    return transaction;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n\n  return data;\n} // @ts-ignore\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    _defineProperty(this, \"authorizedPubkey\", void 0);\n\n    _defineProperty(this, \"nonce\", void 0);\n\n    _defineProperty(this, \"feeCalculator\", void 0);\n\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: params.lamports\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\n_defineProperty(SystemProgram, \"programId\", new PublicKey('11111111111111111111111111111111')); // rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\n_defineProperty(Loader, \"chunkSize\", CHUNK_SIZE);\n\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n/** Highest positive signed 32-bit float value */\n\n\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\n\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\n\nconst delimiter = '-'; // '\\x2D'\n\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\n\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\n\nconst errors = {\n  'overflow': 'Overflow: input needs wider integers to process',\n  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n  'invalid-input': 'Invalid input'\n};\n/** Convenience shortcuts */\n\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\n\nfunction error(type) {\n  throw new RangeError(errors[type]);\n}\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\n\n\nfunction map$1(array, fn) {\n  const result = [];\n  let length = array.length;\n\n  while (length--) {\n    result[length] = fn(array[length]);\n  }\n\n  return result;\n}\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\n\n\nfunction mapDomain(string, fn) {\n  const parts = string.split('@');\n  let result = '';\n\n  if (parts.length > 1) {\n    // In email addresses, only the domain name should be punycoded. Leave\n    // the local part (i.e. everything up to `@`) intact.\n    result = parts[0] + '@';\n    string = parts[1];\n  } // Avoid `split(regex)` for IE8 compatibility. See #17.\n\n\n  string = string.replace(regexSeparators, '\\x2E');\n  const labels = string.split('.');\n  const encoded = map$1(labels, fn).join('.');\n  return result + encoded;\n}\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\n\n\nfunction ucs2decode(string) {\n  const output = [];\n  let counter = 0;\n  const length = string.length;\n\n  while (counter < length) {\n    const value = string.charCodeAt(counter++);\n\n    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n      // It's a high surrogate, and there is a next character.\n      const extra = string.charCodeAt(counter++);\n\n      if ((extra & 0xFC00) == 0xDC00) {\n        // Low surrogate.\n        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n      } else {\n        // It's an unmatched surrogate; only append this code unit, in case the\n        // next code unit is the high surrogate of a surrogate pair.\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n\n  return output;\n}\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\n\n\nconst digitToBasic = function (digit, flag) {\n  //  0..25 map to ASCII a..z or A..Z\n  // 26..35 map to ASCII 0..9\n  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\n\n\nconst adapt = function (delta, numPoints, firstTime) {\n  let k = 0;\n  delta = firstTime ? floor(delta / damp) : delta >> 1;\n  delta += floor(delta / numPoints);\n\n  for (;\n  /* no initialization */\n  delta > baseMinusTMin * tMax >> 1; k += base) {\n    delta = floor(delta / baseMinusTMin);\n  }\n\n  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\n\n\nconst encode = function (input) {\n  const output = []; // Convert the input in UCS-2 to an array of Unicode code points.\n\n  input = ucs2decode(input); // Cache the length.\n\n  let inputLength = input.length; // Initialize the state.\n\n  let n = initialN;\n  let delta = 0;\n  let bias = initialBias; // Handle the basic code points.\n\n  for (const currentValue of input) {\n    if (currentValue < 0x80) {\n      output.push(stringFromCharCode(currentValue));\n    }\n  }\n\n  let basicLength = output.length;\n  let handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;\n  // `basicLength` is the number of basic code points.\n  // Finish the basic string with a delimiter unless it's empty.\n\n  if (basicLength) {\n    output.push(delimiter);\n  } // Main encoding loop:\n\n\n  while (handledCPCount < inputLength) {\n    // All non-basic code points < n have been handled already. Find the next\n    // larger one:\n    let m = maxInt;\n\n    for (const currentValue of input) {\n      if (currentValue >= n && currentValue < m) {\n        m = currentValue;\n      }\n    } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n    // but guard against overflow.\n\n\n    const handledCPCountPlusOne = handledCPCount + 1;\n\n    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n      error('overflow');\n    }\n\n    delta += (m - n) * handledCPCountPlusOne;\n    n = m;\n\n    for (const currentValue of input) {\n      if (currentValue < n && ++delta > maxInt) {\n        error('overflow');\n      }\n\n      if (currentValue == n) {\n        // Represent delta as a generalized variable-length integer.\n        let q = delta;\n\n        for (let k = base;;\n        /* no condition */\n        k += base) {\n          const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n          if (q < t) {\n            break;\n          }\n\n          const qMinusT = q - t;\n          const baseMinusT = base - t;\n          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n          q = floor(qMinusT / baseMinusT);\n        }\n\n        output.push(stringFromCharCode(digitToBasic(q, 0)));\n        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n        delta = 0;\n        ++handledCPCount;\n      }\n    }\n\n    ++delta;\n    ++n;\n  }\n\n  return output.join('');\n};\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\n\n\nconst toASCII = function (input) {\n  return mapDomain(input, function (string) {\n    return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n  });\n}; // Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\n\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction stringifyPrimitive(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n}\n\nfunction stringify(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function (k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\n      if (isArray(obj[k])) {\n        return map(obj[k], function (v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));\n}\n\nfunction map(xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n\n  return res;\n};\n\nfunction parse$1(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n  var maxKeys = 1000;\n\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count\n\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr,\n        vstr,\n        k,\n        v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n} // Copyright Joyent, Inc. and other Node contributors.\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n} // Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\n\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    // Special case for a simple path URL\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n    // RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\ndelims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n    // RFC 2396: characters not allowed for various reasons.\nunwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\nunsafeProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that never have a hostname.\nhostlessProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that always contain a // bit.\nslashedProtocol = {\n  'http': true,\n  'https': true,\n  'ftp': true,\n  'gopher': true,\n  'file': true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n};\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  return parse(this, url, parseQueryString, slashesDenoteHost);\n};\n\nfunction parse(self, url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError('Parameter \\'url\\' must be a string, not ' + typeof url);\n  } // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n\n\n  var queryIndex = url.indexOf('?'),\n      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n  var rest = url; // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n\n    if (simplePath) {\n      self.path = rest;\n      self.href = rest;\n      self.pathname = simplePath[1];\n\n      if (simplePath[2]) {\n        self.search = simplePath[2];\n\n        if (parseQueryString) {\n          self.query = parse$1(self.search.substr(1));\n        } else {\n          self.query = self.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        self.search = '';\n        self.query = {};\n      }\n\n      return self;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    self.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  } // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      self.slashes = true;\n    }\n  }\n\n  var i, hec, l, p;\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    } // Now we have a portion which is definitely the auth.\n    // Pull that off.\n\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      self.auth = decodeURIComponent(auth);\n    } // the host is the remaining to the left of the first non-host char\n\n\n    hostEnd = -1;\n\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // if we still have not hit it, then the entire thing is a host.\n\n\n    if (hostEnd === -1) hostEnd = rest.length;\n    self.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd); // pull out port.\n\n    parseHost(self); // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n\n    self.hostname = self.hostname || ''; // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n\n    var ipv6Hostname = self.hostname[0] === '[' && self.hostname[self.hostname.length - 1] === ']'; // validate a little.\n\n    if (!ipv6Hostname) {\n      var hostparts = self.hostname.split(/\\./);\n\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          } // we test again with ASCII char only\n\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n\n            self.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (self.hostname.length > hostnameMaxLen) {\n      self.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      self.hostname = self.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      self.hostname = toASCII(self.hostname);\n    }\n\n    p = self.port ? ':' + self.port : '';\n    var h = self.hostname || '';\n    self.host = h + p;\n    self.href += self.host; // strip [ and ] from the hostname\n    // the host field still retains them, though\n\n    if (ipv6Hostname) {\n      self.hostname = self.hostname.substr(1, self.hostname.length - 2);\n\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  } // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n\n\n  if (!unsafeProtocol[lowerProto]) {\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) continue;\n      var esc = encodeURIComponent(ae);\n\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n\n      rest = rest.split(ae).join(esc);\n    }\n  } // chop off from the tail first.\n\n\n  var hash = rest.indexOf('#');\n\n  if (hash !== -1) {\n    // got a fragment string.\n    self.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf('?');\n\n  if (qm !== -1) {\n    self.search = rest.substr(qm);\n    self.query = rest.substr(qm + 1);\n\n    if (parseQueryString) {\n      self.query = parse$1(self.query);\n    }\n\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    self.search = '';\n    self.query = {};\n  }\n\n  if (rest) self.pathname = rest;\n\n  if (slashedProtocol[lowerProto] && self.hostname && !self.pathname) {\n    self.pathname = '/';\n  } //to support http.request\n\n\n  if (self.pathname || self.search) {\n    p = self.pathname || '';\n    var s = self.search || '';\n    self.path = p + s;\n  } // finally, reconstruct the href based on what has been validated.\n\n\n  self.href = format(self);\n  return self;\n} // format a parsed object into a url string\n\n\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = parse({}, obj);\n  return format(obj);\n}\n\nfunction format(self) {\n  var auth = self.auth || '';\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = self.protocol || '',\n      pathname = self.pathname || '',\n      hash = self.hash || '',\n      host = false,\n      query = '';\n\n  if (self.host) {\n    host = auth + self.host;\n  } else if (self.hostname) {\n    host = auth + (self.hostname.indexOf(':') === -1 ? self.hostname : '[' + this.hostname + ']');\n\n    if (self.port) {\n      host += ':' + self.port;\n    }\n  }\n\n  if (self.query && isObject(self.query) && Object.keys(self.query).length) {\n    query = stringify(self.query);\n  }\n\n  var search = self.search || query && '?' + query || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n\n  if (self.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n  return protocol + host + pathname + search + hash;\n}\n\nUrl.prototype.format = function () {\n  return format(this);\n};\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nUrl.prototype.resolveObject = function (relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  } // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n\n\n  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.\n\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  } // hrefs like //foo/bar always cut to the protocol.\n\n\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol') result[rkey] = relative[rkey];\n    } //urlParse appends trailing / to urls like http://www.example.com\n\n\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  var relPath;\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      relPath = (relative.pathname || '').split('/');\n\n      while (relPath.length && !(relative.host = relPath.shift()));\n\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port; // to support http.request\n\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n  relPath = relative.pathname && relative.pathname.split('/') || []; // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);\n    }\n\n    result.host = '';\n\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);\n      }\n\n      relative.host = null;\n    }\n\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  var authInHost;\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath; // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\n      authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n\n    result.search = relative.search;\n    result.query = relative.query; //to support http.request\n\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null; //to support http.request\n\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n\n    result.href = result.format();\n    return result;\n  } // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n\n\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n\n  var up = 0;\n\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back\n\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\n    authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  } //to support request.http\n\n\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  return parseHost(this);\n};\n\nfunction parseHost(self) {\n  var host = self.host;\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== ':') {\n      self.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) self.hostname = host;\n} // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nfunction promiseTimeout(promise, timeoutMs) {\n  let timeoutId;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n */\n\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string()))\n}));\n\nfunction createRpcClient(url, useHttps, httpHeaders, fetchMiddleware) {\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url, options) => {\n      return new Promise((resolve, reject) => {\n        fetchMiddleware(url, options, async (url, options) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n            break;\n          }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n/**\n * @internal\n */\n\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst TransactionFromConfirmed = coerce(instance(Transaction), ConfirmedTransactionResult, result => {\n  const {\n    message,\n    signatures\n  } = result;\n  return Transaction.populate(new Message(message), signatures);\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: TransactionFromConfirmed,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\n\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\n\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: TransactionFromConfirmed,\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\n\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    _defineProperty(this, \"_commitment\", void 0);\n\n    _defineProperty(this, \"_rpcEndpoint\", void 0);\n\n    _defineProperty(this, \"_rpcClient\", void 0);\n\n    _defineProperty(this, \"_rpcRequest\", void 0);\n\n    _defineProperty(this, \"_rpcBatchRequest\", void 0);\n\n    _defineProperty(this, \"_rpcWebSocket\", void 0);\n\n    _defineProperty(this, \"_rpcWebSocketConnected\", false);\n\n    _defineProperty(this, \"_rpcWebSocketHeartbeat\", null);\n\n    _defineProperty(this, \"_rpcWebSocketIdleTimeout\", null);\n\n    _defineProperty(this, \"_disableBlockhashCaching\", false);\n\n    _defineProperty(this, \"_pollingBlockhash\", false);\n\n    _defineProperty(this, \"_blockhashInfo\", void 0);\n\n    _defineProperty(this, \"_accountChangeSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_accountChangeSubscriptions\", {});\n\n    _defineProperty(this, \"_programAccountChangeSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_programAccountChangeSubscriptions\", {});\n\n    _defineProperty(this, \"_rootSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_rootSubscriptions\", {});\n\n    _defineProperty(this, \"_signatureSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_signatureSubscriptions\", {});\n\n    _defineProperty(this, \"_slotSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_slotSubscriptions\", {});\n\n    _defineProperty(this, \"_logsSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_logsSubscriptions\", {});\n\n    this._rpcEndpoint = endpoint;\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let httpHeaders;\n    let fetchMiddleware;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n    }\n\n    this._rpcClient = createRpcClient(url.href, useHttps, httpHeaders, fetchMiddleware);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n\n    this._rpcWebSocket = new Client(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new Error(\"failed to get Stake Activation \".concat(publicKey.toBase58(), \": \").concat(res.error.message));\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n\n\n  async confirmTransaction(signature, commitment) {\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n    let subscriptionId;\n    let response = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(signature, (result, context) => {\n          subscriptionId = undefined;\n          response = {\n            context,\n            value: result\n          };\n          resolve(null);\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    let timeoutMs = 60 * 1000;\n\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip':\n        {\n          timeoutMs = 30 * 1000;\n          break;\n        }\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\"Transaction was not confirmed in \".concat(duration.toFixed(2), \" seconds. It is unknown if it succeeded or failed. Check signature \").concat(signature, \" using the Solana Explorer or CLI tools.\"));\n    }\n\n    return response;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   * @deprecated Deprecated since v1.2.8. Use `Connection.getSupply()` instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n\n    return res.result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   * @deprecated Deprecated since v1.3. Use `Connection.getConfirmedSignaturesForAddress2()` instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n\n\n  async requestAirdrop(to, amount) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), amount]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _recentBlockhash(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n\n      for (let i = 0; i < 50; i++) {\n        const {\n          blockhash\n        } = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return blockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n\n  async simulateTransaction(transaction, signers) {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      if ('data' in res.error) {\n        const logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._resetSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _subscribe(sub, rpcMethod, rpcArgs) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n\n        console.error(\"\".concat(rpcMethod, \" error for argument\"), rpcArgs, err.message);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribe(sub, rpcMethod) {\n    const subscriptionId = sub.subscriptionId;\n\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId = subscriptionId;\n\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(\"\".concat(rpcMethod, \" error:\"), err.message);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._programAccountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._signatureSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._rootSubscriptions).forEach(s => s.subscriptionId = null);\n  }\n  /**\n   * @internal\n   */\n\n\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    const programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n\n    if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n\n      this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n\n      this._subscribe(sub, 'programSubscribe', this._buildArgs([sub.programId], sub.commitment, 'base64'));\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args = [sub.signature];\n      if (sub.options) args.push(sub.options);\n\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n\n      if (typeof sub.filter === 'object') {\n        filter = {\n          mentions: [sub.filter.toString()]\n        };\n      } else {\n        filter = sub.filter;\n      }\n\n      this._subscribe(sub, 'logsSubscribe', this._buildArgs([filter], sub.commitment));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const res = create(notification, AccountNotificationResult);\n\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(id) {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(\"Unknown account change id: \".concat(id));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const res = create(notification, ProgramAccountNotificationResult);\n\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {\n          value,\n          context\n        } = res.result;\n        sub.callback({\n          accountId: value.pubkey,\n          accountInfo: value.account\n        }, context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment) {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(id) {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(\"Unknown program account change id: \".concat(id));\n    }\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(id) {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(\"Unknown logs id: \".concat(id));\n    }\n\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const res = create(notification, SlotNotificationResult);\n\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(id) {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(\"Unknown slot change id: \".concat(id));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const res = create(notification, SignatureNotificationResult);\n\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback({\n            type: 'received'\n          }, res.result.context);\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n\n          this._updateSubscriptions();\n\n          sub.callback({\n            type: 'status',\n            result: res.result.value\n          }, res.result.context);\n        }\n\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {\n        commitment\n      },\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSignatureListener(id) {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(\"Unknown signature result id: \".concat(id));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const res = create(notification, RootNotificationResult);\n\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(id) {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(\"Unknown root change id: \".concat(id));\n    }\n  }\n\n}\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    _defineProperty(this, \"staker\", void 0);\n\n    _defineProperty(this, \"withdrawer\", void 0);\n\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    _defineProperty(this, \"unixTimestamp\", void 0);\n\n    _defineProperty(this, \"epoch\", void 0);\n\n    _defineProperty(this, \"custodian\", void 0);\n\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n/**\n * Create stake account transaction params\n */\n\n\n_defineProperty(Lockup, \"default\", new Lockup(0, 0, PublicKey.default));\n/**\n * Stake Instruction class\n */\n\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: authorizedPubkey,\n      newAccountPubkey: splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return transaction.add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\n_defineProperty(StakeProgram, \"programId\", new PublicKey('Stake11111111111111111111111111111111111111'));\n\n_defineProperty(StakeProgram, \"space\", 200);\n\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(\"Error constructing Ethereum address: \".concat(error));\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: 0,\n      ethAddressOffset,\n      ethAddressInstructionIndex: 0,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: 0,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId\n      });\n    } catch (error) {\n      throw new Error(\"Error creating instruction; \".concat(error));\n    }\n  }\n\n}\n\n_defineProperty(Secp256k1Program, \"programId\", new PublicKey('KeccakSecp256k11111111111111111111111111111'));\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"info\", void 0);\n\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoterPubkey'), publicKey('authorizedWithdrawerPubkey'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('lastEpochCredits'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    _defineProperty(this, \"nodePubkey\", void 0);\n\n    _defineProperty(this, \"authorizedVoterPubkey\", void 0);\n\n    _defineProperty(this, \"authorizedWithdrawerPubkey\", void 0);\n\n    _defineProperty(this, \"commission\", void 0);\n\n    _defineProperty(this, \"votes\", void 0);\n\n    _defineProperty(this, \"rootSlot\", void 0);\n\n    _defineProperty(this, \"epoch\", void 0);\n\n    _defineProperty(this, \"credits\", void 0);\n\n    _defineProperty(this, \"lastEpochCredits\", void 0);\n\n    _defineProperty(this, \"epochCredits\", void 0);\n\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits\n    });\n  }\n\n}\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n  }\n\n  return signature;\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com'\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, FeeCalculatorLayout, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, StakeAuthorizationLayout, StakeInstruction, StakeProgram, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/util/to-buffer.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../node_modules/rollup-plugin-node-polyfills/polyfills/global.js","../node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js","../node_modules/rollup-plugin-node-polyfills/polyfills/util.js","../node_modules/rollup-plugin-node-polyfills/polyfills/assert.js","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/punycode/punycode.es6.js","../node_modules/rollup-plugin-node-polyfills/polyfills/qs.js","../node_modules/rollup-plugin-node-polyfills/polyfills/url.js","../src/timing.ts","../src/util/promise-timeout.ts","../src/connection.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"names":["toBuffer","arr","Buffer","MAX_SEED_LENGTH","PublicKey","constructor","decoded","bs58","equals","publicKey","toBase58","toBytes","b","zeroPad","toString","createWithSeed","buffer","fromPublicKey","programId","hash","sha256","createProgramAddress","seeds","seed","publicKeyBytes","is_on_curve","findProgramAddress","nonce","seedsWithNonce","address","isOnCurve","naclLowLevel","nacl","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","c","d","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","inspect","isArray","hasOwnProperty","objectKeys","global","inherits","utilInspect","property","BufferLayout","rustString","rsl","_decode","_encode","data","chars","str","authorized","lockup","alloc","type","item","fields","len","size","elem","bytes","rem_len","PUBKEY_LENGTH","args","account","isAccountWritable","index","serialize","numKeys","keyCount","shortvec","instructions","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","length","signDataLayout","Layout","transaction","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","key","recentBlockhash","signData","from","byteArray","accountCount","accountKeys","i","dataSlice","messageArgs","header","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","SIGNATURE_LENGTH","opts","signature","Object","add","items","compileMessage","nonceInfo","feePayer","programIds","accountMetas","accountMeta","pubkey","isSigner","isWritable","checkSigner","x","y","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","console","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","message","valid","pair","serializeMessage","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatures","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","Message","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","commitment","connection","status","JSON","resolve","setTimeout","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","fromAccountData","nonceAccount","authorizedPubkey","feeCalculator","decodeInstructionType","instructionTypeLayout","typeIndex","layout","decodeCreateAccount","decodeData","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","decodeTransfer","lamports","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","space","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","encodeData","params","transfer","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","load","balanceNeeded","programInfo","program","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","transactions","REQUESTS_PER_SECOND","sleep","Promise","BPF_LOADER_PROGRAM_ID","map","parse","qsParse","qsStringify","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","timeoutPromise","timeoutId","result","clearTimeout","PublicKeyFromString","coerce","instance","string","value","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","union","pick","jsonrpc","id","error","code","unknown","optional","any","UnknownRpcResult","createRpcResult","create","jsonRpcResult","context","slot","number","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","epoch","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","err","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","jsonRpcResultAndContext","logs","fetchWithMiddleware","fetchMiddleware","fetch","reject","clientBrowser","agent","method","body","headers","httpHeaders","too_many_requests_retries","waitTime","res","text","callback","client","requests","batch","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","executable","owner","rentEpoch","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","AccountNotificationResult","subscription","notificationResultAndContext","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","TransactionFromConfirmed","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","url","urlParse","useHttps","commitmentOrConfig","createRpcClient","createRpcRequest","createRpcBatchRequest","lastFetch","transactionSignatures","simulatedSignatures","String","Number","urlFormat","autoconnect","max_reconnects","Infinity","getBalanceAndContext","unsafeRes","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","filter","getParsedTokenAccountsByOwner","getLargestAccounts","arg","config","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","subscriptionCommitment","response","confirmPromise","subscriptionId","timeoutMs","promiseTimeout","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getConfirmedBlock","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","methodName","getConfirmedSignaturesForAddress","firstAvailableBlock","startSlot","block","highestConfirmedRoot","endSlot","confirmedSignatureInfo","info","getConfirmedSignaturesForAddress2","getNonceAndContext","accountInfo","NonceAccount","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","disableCache","encodedTransaction","sendTransaction","sendRawTransaction","sendEncodedTransaction","traceIndent","logTrace","_wsOnOpen","setInterval","_wsOnError","_wsOnClose","clearInterval","_subscribe","sub","_unsubscribe","unsubscribeId","_resetSubscriptions","s","_updateSubscriptions","programKeys","slotKeys","signatureKeys","rootKeys","logsKeys","mentions","_wsOnAccountNotification","onAccountChange","removeAccountChangeListener","subInfo","_wsOnProgramAccountNotification","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","_wsOnLogsNotification","_wsOnSlotNotification","onSlotChange","removeSlotChangeListener","_buildArgs","override","_buildArgsAtLeastConfirmed","_wsOnSignatureNotification","onSignature","notification","onSignatureWithOptions","removeSignatureListener","_wsOnRootNotification","onRootChange","removeRootChangeListener","STAKE_CONFIG_ID","Lockup","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","decodeDelegate","decodeAuthorize","stakeAuthorizationType","o","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","staker","withdrawer","unixTimestamp","custodian","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","split","withdraw","deactivate","ecdsaSign","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","createInstructionWithPublicKey","recoveryId","ethAddress","createInstructionWithEthAddress","rawAddress","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","endpoint","http","devnet","testnet","https","tls","LAMPORTS_PER_SOL"],"mappings":"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","sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\nimport {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * A public key\n */\nexport class PublicKey {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new Error(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","export default (typeof global !== \"undefined\" ? global :\n  typeof self !== \"undefined\" ? self :\n  typeof window !== \"undefined\" ? window : {});","\nvar inherits;\nif (typeof Object.create === 'function'){\n  inherits = function inherits(ctor, superCtor) {\n    // implementation from standard node.js 'util' module\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  inherits = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\nexport default inherits;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport process from 'process';\nvar formatRegExp = /%[sdj%]/g;\nexport function format(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexport function deprecate(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexport function debuglog(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = 0;\n      debugs[set] = function() {\n        var msg = format.apply(null, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nexport function inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexport function isArray(ar) {\n  return Array.isArray(ar);\n}\n\nexport function isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexport function isNull(arg) {\n  return arg === null;\n}\n\nexport function isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexport function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexport function isString(arg) {\n  return typeof arg === 'string';\n}\n\nexport function isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\n\nexport function isUndefined(arg) {\n  return arg === void 0;\n}\n\nexport function isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nexport function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nexport function isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nexport function isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nexport function isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexport function isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\n\nexport function isBuffer(maybeBuf) {\n  return Buffer.isBuffer(maybeBuf);\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexport function log() {\n  console.log('%s - %s', timestamp(), format.apply(null, arguments));\n}\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nimport inherits from './inherits';\nexport {inherits}\n\nexport function _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport default {\n  inherits: inherits,\n  _extend: _extend,\n  log: log,\n  isBuffer: isBuffer,\n  isPrimitive: isPrimitive,\n  isFunction: isFunction,\n  isError: isError,\n  isDate: isDate,\n  isObject: isObject,\n  isRegExp: isRegExp,\n  isUndefined: isUndefined,\n  isSymbol: isSymbol,\n  isString: isString,\n  isNumber: isNumber,\n  isNullOrUndefined: isNullOrUndefined,\n  isNull: isNull,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  inspect: inspect,\n  deprecate: deprecate,\n  format: format,\n  debuglog: debuglog\n}\n","\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport {isBuffer} from 'buffer';\nimport {isPrimitive, inherits, isError, isFunction, isRegExp, isDate, inspect as utilInspect} from 'util';\nvar pSlice = Array.prototype.slice;\nvar _functionsHaveNames;\nfunction functionsHaveNames() {\n  if (typeof _functionsHaveNames !== 'undefined') {\n    return _functionsHaveNames;\n  }\n  return _functionsHaveNames = (function () {\n    return function foo() {}.name === 'foo';\n  }());\n}\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nfunction assert(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nexport default assert;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames()) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = AssertionError;\nexport function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n}\n\n// assert.AssertionError instanceof Error\ninherits(AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames() || !isFunction(something)) {\n    return utilInspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nexport function fail(actual, expected, message, operator, stackStartFunction) {\n  throw new AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nexport function ok(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nassert.ok = ok;\nexport {ok as assert};\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\nassert.equal = equal;\nexport function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', equal);\n}\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\nassert.notEqual = notEqual;\nexport function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', notEqual);\n  }\n}\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\nassert.deepEqual = deepEqual;\nexport function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', deepEqual);\n  }\n}\nassert.deepStrictEqual = deepStrictEqual;\nexport function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);\n  }\n}\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (isDate(actual) && isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (isRegExp(actual) && isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (isPrimitive(a) || isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\nassert.notDeepEqual = notDeepEqual;\nexport function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);\n  }\n}\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nexport function notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\nassert.strictEqual = strictEqual;\nexport function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', strictEqual);\n  }\n}\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\nassert.notStrictEqual = notStrictEqual;\nexport function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', notStrictEqual);\n  }\n}\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\nassert.throws = throws;\nexport function throws(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = doesNotThrow;\nexport function doesNotThrow(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}\n\nassert.ifError = ifError;\nexport function ifError(err) {\n  if (err) throw err;\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\ntype TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\ntype NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Account>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: typeof BufferLayout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @ts-ignore\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\nfunction stringifyPrimitive(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n}\n\nexport function stringify (obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\nexport function parse(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\nexport default {\n  encode: stringify,\n  stringify: stringify,\n  decode: parse,\n  parse: parse\n}\nexport {stringify as encode, parse as decode};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nimport {toASCII} from 'punycode';\nimport {isObject,isString,isNullOrUndefined,isNull} from 'util';\nimport {parse as qsParse,stringify as qsStringify} from 'querystring';\nexport {\n  urlParse as parse,\n  urlResolve as resolve,\n  urlResolveObject as resolveObject,\n  urlFormat as format\n};\nexport default {\n  parse: urlParse,\n  resolve: urlResolve,\n  resolveObject: urlResolveObject,\n  format: urlFormat,\n  Url: Url\n}\nexport function Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n  portPattern = /:[0-9]*$/,\n\n  // Special case for a simple path URL\n  simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n  // RFC 2396: characters reserved for delimiting URLs.\n  // We actually just auto-escape these.\n  delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n  // RFC 2396: characters not allowed for various reasons.\n  unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n  autoEscape = ['\\''].concat(unwise),\n  // Characters that are never ever allowed in a hostname.\n  // Note that any invalid chars are also handled, but these\n  // are the ones that are *expected* to be seen, so we fast-path\n  // them.\n  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n  hostEndingChars = ['/', '?', '#'],\n  hostnameMaxLen = 255,\n  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n  // protocols that can allow \"unsafe\" and \"unwise\" chars.\n  unsafeProtocol = {\n    'javascript': true,\n    'javascript:': true\n  },\n  // protocols that never have a hostname.\n  hostlessProtocol = {\n    'javascript': true,\n    'javascript:': true\n  },\n  // protocols that always contain a // bit.\n  slashedProtocol = {\n    'http': true,\n    'https': true,\n    'ftp': true,\n    'gopher': true,\n    'file': true,\n    'http:': true,\n    'https:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'file:': true\n  };\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  return parse(this, url, parseQueryString, slashesDenoteHost);\n}\n\nfunction parse(self, url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError('Parameter \\'url\\' must be a string, not ' + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n    splitter =\n    (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n    uSplit = url.split(splitter),\n    slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      self.path = rest;\n      self.href = rest;\n      self.pathname = simplePath[1];\n      if (simplePath[2]) {\n        self.search = simplePath[2];\n        if (parseQueryString) {\n          self.query = qsParse(self.search.substr(1));\n        } else {\n          self.query = self.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        self.search = '';\n        self.query = {};\n      }\n      return self;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    self.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      self.slashes = true;\n    }\n  }\n  var i, hec, l, p;\n  if (!hostlessProtocol[proto] &&\n    (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      self.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    self.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    parseHost(self);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    self.hostname = self.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = self.hostname[0] === '[' &&\n      self.hostname[self.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = self.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            self.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (self.hostname.length > hostnameMaxLen) {\n      self.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      self.hostname = self.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      self.hostname = toASCII(self.hostname);\n    }\n\n    p = self.port ? ':' + self.port : '';\n    var h = self.hostname || '';\n    self.host = h + p;\n    self.href += self.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      self.hostname = self.hostname.substr(1, self.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    self.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    self.search = rest.substr(qm);\n    self.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      self.query = qsParse(self.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    self.search = '';\n    self.query = {};\n  }\n  if (rest) self.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n    self.hostname && !self.pathname) {\n    self.pathname = '/';\n  }\n\n  //to support http.request\n  if (self.pathname || self.search) {\n    p = self.pathname || '';\n    var s = self.search || '';\n    self.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  self.href = format(self);\n  return self;\n}\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = parse({}, obj);\n  return format(obj);\n}\n\nfunction format(self) {\n  var auth = self.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = self.protocol || '',\n    pathname = self.pathname || '',\n    hash = self.hash || '',\n    host = false,\n    query = '';\n\n  if (self.host) {\n    host = auth + self.host;\n  } else if (self.hostname) {\n    host = auth + (self.hostname.indexOf(':') === -1 ?\n      self.hostname :\n      '[' + this.hostname + ']');\n    if (self.port) {\n      host += ':' + self.port;\n    }\n  }\n\n  if (self.query &&\n    isObject(self.query) &&\n    Object.keys(self.query).length) {\n    query = qsStringify(self.query);\n  }\n\n  var search = self.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (self.slashes ||\n    (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n}\n\nUrl.prototype.format = function() {\n  return format(this);\n}\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n      result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n  var relPath;\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n    isRelAbs = (\n      relative.host ||\n      relative.pathname && relative.pathname.charAt(0) === '/'\n    ),\n    mustEndAbs = (isRelAbs || isSourceAbs ||\n      (result.host && relative.pathname)),\n    removeAllDots = mustEndAbs,\n    srcPath = result.pathname && result.pathname.split('/') || [],\n    psychotic = result.protocol && !slashedProtocol[result.protocol];\n  relPath = relative.pathname && relative.pathname.split('/') || [];\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n  var authInHost;\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n      relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      authInHost = result.host && result.host.indexOf('@') > 0 ?\n        result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n        (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n    (result.host || relative.host || srcPath.length > 1) &&\n    (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n    (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n    (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n      srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    authInHost = result.host && result.host.indexOf('@') > 0 ?\n      result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n      (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  return parseHost(this);\n};\n\nfunction parseHost(self) {\n  var host = self.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      self.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) self.hostname = host;\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import assert from 'assert';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch, {Response} from 'node-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n */\nexport type EpochSchedule = {\n  /** The maximum number of slots in each epoch */\n  slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  firstNormalSlot: number;\n};\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\n/**\n * @internal\n */\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TransactionFromConfirmed = coerce(\n  instance(Transaction),\n  ConfirmedTransactionResult,\n  result => {\n    const {message, signatures} = result;\n    return Transaction.populate(new Message(message), signatures);\n  },\n);\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: TransactionFromConfirmed,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: TransactionFromConfirmed,\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = Exclude<\n  GetProgramAccountsConfig,\n  'encoding' | 'dataSlice'\n>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    this._rpcEndpoint = endpoint;\n\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let httpHeaders;\n    let fetchMiddleware;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n    }\n\n    this._rpcClient = createRpcClient(\n      url.href,\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = '';\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   * @deprecated Deprecated since v1.2.8. Use `Connection.getSupply()` instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   * @deprecated Deprecated since v1.3. Use `Connection.getConfirmedSignaturesForAddress2()` instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[\n            block.signatures.length - 1\n          ].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[\n            block.signatures.length - 1\n          ].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      if ('data' in res.error) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey,\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport assert from 'assert';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {ethAddress: rawAddress, message, signature, recoveryId} = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './fee-calculator';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}