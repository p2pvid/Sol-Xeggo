{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { cache } from \"../contexts/accounts\";\nimport { useMarkets } from \"../contexts/market\";\nimport { fromLamports } from \"../utils/utils\";\nimport { useUserAccounts } from \"./useUserAccounts\";\nexport function useUserTotalBalance() {\n  const {\n    userAccounts\n  } = useUserAccounts();\n  const [balanceInUSD, setBalanceInUSD] = useState(0);\n  const {\n    marketEmitter,\n    midPriceInUSD\n  } = useMarkets();\n  useEffect(() => {\n    const updateBalance = () => {\n      let total = 0;\n\n      for (let i = 0; i < userAccounts.length; i++) {\n        const account = userAccounts[i];\n        const mintAddress = account.info.mint.toBase58();\n        const mint = cache.get(mintAddress);\n\n        if (mint) {\n          const balance = fromLamports(account.info.amount.toNumber(), mint.info);\n          total += balance * midPriceInUSD(mintAddress);\n        }\n      }\n\n      setBalanceInUSD(total);\n    };\n\n    const dispose = marketEmitter.onMarket(args => {\n      updateBalance();\n    });\n    updateBalance();\n    return () => {\n      dispose();\n    };\n  }, [userAccounts, marketEmitter, midPriceInUSD, setBalanceInUSD]);\n  return {\n    balanceInUSD,\n    accounts: userAccounts,\n    hasBalance: userAccounts.length > 0 && balanceInUSD > 0\n  };\n}","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/hooks/useUserTotalBalance.ts"],"names":["useEffect","useState","cache","useMarkets","fromLamports","useUserAccounts","useUserTotalBalance","userAccounts","balanceInUSD","setBalanceInUSD","marketEmitter","midPriceInUSD","updateBalance","total","i","length","account","mintAddress","info","mint","toBase58","get","balance","amount","toNumber","dispose","onMarket","args","accounts","hasBalance"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,SAASC,mBAAT,GAA+B;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAmBF,eAAe,EAAxC;AACA,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM;AAAES,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAmCR,UAAU,EAAnD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,aAAa,GAAG,MAAM;AAC1B,UAAIC,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,YAAY,CAACQ,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,cAAME,OAAO,GAAGT,YAAY,CAACO,CAAD,CAA5B;AACA,cAAMG,WAAW,GAAGD,OAAO,CAACE,IAAR,CAAaC,IAAb,CAAkBC,QAAlB,EAApB;AACA,cAAMD,IAAI,GAAGjB,KAAK,CAACmB,GAAN,CAAUJ,WAAV,CAAb;;AACA,YAAIE,IAAJ,EAAU;AACR,gBAAMG,OAAO,GAAGlB,YAAY,CAACY,OAAO,CAACE,IAAR,CAAaK,MAAb,CAAoBC,QAApB,EAAD,EAAiCL,IAAI,CAACD,IAAtC,CAA5B;AACAL,UAAAA,KAAK,IAAIS,OAAO,GAAGX,aAAa,CAACM,WAAD,CAAhC;AACD;AACF;;AAGDR,MAAAA,eAAe,CAACI,KAAD,CAAf;AACD,KAdD;;AAgBA,UAAMY,OAAO,GAAGf,aAAa,CAACgB,QAAd,CAAwBC,IAAD,IAAU;AAC/Cf,MAAAA,aAAa;AACd,KAFe,CAAhB;AAIAA,IAAAA,aAAa;AAEb,WAAO,MAAM;AACXa,MAAAA,OAAO;AACR,KAFD;AAGD,GA1BQ,EA0BN,CAAClB,YAAD,EAAeG,aAAf,EAA8BC,aAA9B,EAA6CF,eAA7C,CA1BM,CAAT;AA4BA,SAAO;AACLD,IAAAA,YADK;AAELoB,IAAAA,QAAQ,EAAErB,YAFL;AAGLsB,IAAAA,UAAU,EAAEtB,YAAY,CAACQ,MAAb,GAAsB,CAAtB,IAA2BP,YAAY,GAAG;AAHjD,GAAP;AAKD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { cache } from \"../contexts/accounts\";\nimport { useMarkets } from \"../contexts/market\";\nimport { fromLamports } from \"../utils/utils\";\nimport { useUserAccounts } from \"./useUserAccounts\";\n\nexport function useUserTotalBalance() {\n  const { userAccounts } = useUserAccounts();\n  const [balanceInUSD, setBalanceInUSD] = useState(0);\n  const { marketEmitter, midPriceInUSD } = useMarkets();\n\n  useEffect(() => {\n    const updateBalance = () => {\n      let total = 0;\n      for (let i = 0; i < userAccounts.length; i++) {\n        const account = userAccounts[i];\n        const mintAddress = account.info.mint.toBase58();\n        const mint = cache.get(mintAddress);\n        if (mint) {\n          const balance = fromLamports(account.info.amount.toNumber(), mint.info);\n          total += balance * midPriceInUSD(mintAddress);\n        }\n      }\n\n\n      setBalanceInUSD(total);\n    };\n\n    const dispose = marketEmitter.onMarket((args) => {\n      updateBalance();\n    });\n\n    updateBalance();\n\n    return () => {\n      dispose();\n    };\n  }, [userAccounts, marketEmitter, midPriceInUSD, setBalanceInUSD]);\n\n  return {\n    balanceInUSD,\n    accounts: userAccounts,\n    hasBalance: userAccounts.length > 0 && balanceInUSD > 0,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}