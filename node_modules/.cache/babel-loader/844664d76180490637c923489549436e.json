{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\nconst MAX_PAYLOAD = 255;\nconst LEDGER_CLA = 0xe0;\n/*\n * Helper for chunked send of large payloads\n */\n\nasync function ledgerSend(transport, instruction, p1, payload) {\n  let p2 = 0;\n  let payloadOffset = 0;\n\n  if (payload.length > MAX_PAYLOAD) {\n    while (payload.length - payloadOffset > MAX_PAYLOAD) {\n      const chunk = payload.slice(payloadOffset, payloadOffset + MAX_PAYLOAD);\n      payloadOffset += MAX_PAYLOAD;\n      console.log(\"send\", (p2 | P2_MORE).toString(16), chunk.length.toString(16), chunk);\n      const reply = await transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, chunk);\n\n      if (reply.length !== 2) {\n        throw new Error(\"Received unexpected reply payload\");\n      }\n\n      p2 |= P2_EXTEND;\n    }\n  }\n\n  const chunk = payload.slice(payloadOffset);\n  console.log(\"send\", p2.toString(16), chunk.length.toString(16), chunk);\n  const reply = await transport.send(LEDGER_CLA, instruction, p1, p2, chunk);\n  return reply.slice(0, reply.length - 2);\n}\n\nconst BIP32_HARDENED_BIT = 1 << 31 >>> 0;\n\nfunction harden(n = 0) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nexport function getSolanaDerivationPath(account, change) {\n  var length;\n\n  if (account !== undefined) {\n    if (change !== undefined) {\n      length = 4;\n    } else {\n      length = 3;\n    }\n  } else {\n    length = 2;\n  }\n\n  var derivationPath = Buffer.alloc(1 + length * 4); // eslint-disable-next-line\n\n  var offset = 0;\n  offset = derivationPath.writeUInt8(length, offset);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n  if (length > 2) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n\n    if (length === 4) {\n      // @FIXME: https://github.com/project-serum/spl-token-wallet/issues/59\n      offset = derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n\n  return derivationPath;\n}\nexport async function signTransaction(transport, transaction, derivationPath = getSolanaDerivationPath()) {\n  const messageBytes = transaction.serializeMessage();\n  return signBytes(transport, messageBytes, derivationPath);\n}\nexport async function signBytes(transport, bytes, derivationPath = getSolanaDerivationPath()) {\n  const numPaths = Buffer.alloc(1);\n  numPaths.writeUInt8(1, 0);\n  const payload = Buffer.concat([numPaths, derivationPath, bytes]); // @FIXME: must enable blind signing in Solana Ledger App per https://github.com/project-serum/spl-token-wallet/issues/71\n  // See also https://github.com/project-serum/spl-token-wallet/pull/23#issuecomment-712317053\n\n  return ledgerSend(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);\n}\nexport async function getPublicKey(transport, derivationPath = getSolanaDerivationPath()) {\n  const publicKeyBytes = await ledgerSend(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n  return new PublicKey(publicKeyBytes);\n}","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/wallet-adapters/ledger/core.ts"],"names":["PublicKey","INS_GET_PUBKEY","INS_SIGN_MESSAGE","P1_NON_CONFIRM","P1_CONFIRM","P2_EXTEND","P2_MORE","MAX_PAYLOAD","LEDGER_CLA","ledgerSend","transport","instruction","p1","payload","p2","payloadOffset","length","chunk","slice","console","log","toString","reply","send","Error","BIP32_HARDENED_BIT","harden","n","getSolanaDerivationPath","account","change","undefined","derivationPath","Buffer","alloc","offset","writeUInt8","writeUInt32BE","signTransaction","transaction","messageBytes","serializeMessage","signBytes","bytes","numPaths","concat","getPublicKey","publicKeyBytes"],"mappings":"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","sourcesContent":["import type Transport from \"@ledgerhq/hw-transport\";\nimport type { Transaction } from \"@solana/web3.js\";\n\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\n\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\n\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\n\nconst MAX_PAYLOAD = 255;\n\nconst LEDGER_CLA = 0xe0;\n\n/*\n * Helper for chunked send of large payloads\n */\nasync function ledgerSend(\n  transport: Transport,\n  instruction: number,\n  p1: number,\n  payload: Buffer\n) {\n  let p2 = 0;\n  let payloadOffset = 0;\n\n  if (payload.length > MAX_PAYLOAD) {\n    while (payload.length - payloadOffset > MAX_PAYLOAD) {\n      const chunk = payload.slice(payloadOffset, payloadOffset + MAX_PAYLOAD);\n      payloadOffset += MAX_PAYLOAD;\n      console.log(\n        \"send\",\n        (p2 | P2_MORE).toString(16),\n        chunk.length.toString(16),\n        chunk\n      );\n      const reply = await transport.send(\n        LEDGER_CLA,\n        instruction,\n        p1,\n        p2 | P2_MORE,\n        chunk\n      );\n      if (reply.length !== 2) {\n        throw new Error(\"Received unexpected reply payload\");\n      }\n      p2 |= P2_EXTEND;\n    }\n  }\n\n  const chunk = payload.slice(payloadOffset);\n  console.log(\"send\", p2.toString(16), chunk.length.toString(16), chunk);\n  const reply = await transport.send(LEDGER_CLA, instruction, p1, p2, chunk);\n\n  return reply.slice(0, reply.length - 2);\n}\n\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\nfunction harden(n: number = 0) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nexport function getSolanaDerivationPath(account?: number, change?: number) {\n  var length;\n  if (account !== undefined) {\n    if (change !== undefined) {\n      length = 4;\n    } else {\n      length = 3;\n    }\n  } else {\n    length = 2;\n  }\n\n  var derivationPath = Buffer.alloc(1 + length * 4);\n  // eslint-disable-next-line\n  var offset = 0;\n  offset = derivationPath.writeUInt8(length, offset);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n  if (length > 2) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n    if (length === 4) {\n      // @FIXME: https://github.com/project-serum/spl-token-wallet/issues/59\n      offset = derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n\n  return derivationPath;\n}\n\nexport async function signTransaction(\n  transport: Transport,\n  transaction: Transaction,\n  derivationPath: Buffer = getSolanaDerivationPath()\n) {\n  const messageBytes = transaction.serializeMessage();\n  return signBytes(transport, messageBytes, derivationPath);\n}\n\nexport async function signBytes(\n  transport: Transport,\n  bytes: Buffer,\n  derivationPath: Buffer = getSolanaDerivationPath()\n) {\n  const numPaths = Buffer.alloc(1);\n  numPaths.writeUInt8(1, 0);\n\n  const payload = Buffer.concat([numPaths, derivationPath, bytes]);\n\n  // @FIXME: must enable blind signing in Solana Ledger App per https://github.com/project-serum/spl-token-wallet/issues/71\n  // See also https://github.com/project-serum/spl-token-wallet/pull/23#issuecomment-712317053\n  return ledgerSend(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);\n}\n\nexport async function getPublicKey(\n  transport: Transport,\n  derivationPath: Buffer = getSolanaDerivationPath()\n) {\n  const publicKeyBytes = await ledgerSend(\n    transport,\n    INS_GET_PUBKEY,\n    P1_NON_CONFIRM,\n    derivationPath\n  );\n\n  return new PublicKey(publicKeyBytes);\n}\n"]},"metadata":{},"sourceType":"module"}