{"ast":null,"code":"var _jsxFileName = \"/home/ankit/solana/dapp-scaffold/src/contexts/wallet.tsx\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Button, Modal } from \"antd\";\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { notify } from \"./../utils/notifications\";\nimport { useConnectionConfig } from \"./connection\";\nimport { useLocalStorageState } from \"./../utils/utils\";\nimport { LedgerWalletAdapter } from \"../wallet-adapters/ledger\";\nimport { SolongWalletAdapter } from \"../wallet-adapters/solong\";\nimport { PhantomWalletAdapter } from \"../wallet-adapters/phantom\";\nconst ASSETS_URL = \"https://raw.githubusercontent.com/solana-labs/oyster/main/assets/wallets/\";\nexport const WALLET_PROVIDERS = [{\n  name: \"Sollet\",\n  url: \"https://www.sollet.io\",\n  icon: `${ASSETS_URL}sollet.svg`\n}, {\n  name: \"Solong\",\n  url: \"https://solongwallet.com\",\n  icon: `${ASSETS_URL}solong.png`,\n  adapter: SolongWalletAdapter\n}, {\n  name: \"Solflare\",\n  url: \"https://solflare.com/access-wallet\",\n  icon: `${ASSETS_URL}solflare.svg`\n}, {\n  name: \"MathWallet\",\n  url: \"https://mathwallet.org\",\n  icon: `${ASSETS_URL}mathwallet.svg`\n}, {\n  name: \"Ledger\",\n  url: \"https://www.ledger.com\",\n  icon: `${ASSETS_URL}ledger.svg`,\n  adapter: LedgerWalletAdapter\n}, {\n  name: \"Phantom\",\n  url: \"https://phantom.app/\",\n  icon: `https://raydium.io/_nuxt/img/phantom.d9e3c61.png`,\n  adapter: PhantomWalletAdapter\n}];\nconst WalletContext = React.createContext({\n  wallet: undefined,\n  connected: false,\n\n  select() {},\n\n  provider: undefined\n});\nexport function WalletProvider({\n  children = null\n}) {\n  const {\n    endpoint\n  } = useConnectionConfig();\n  const [autoConnect, setAutoConnect] = useState(false);\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\"walletProvider\");\n  const provider = useMemo(() => WALLET_PROVIDERS.find(({\n    url\n  }) => url === providerUrl), [providerUrl]);\n  const wallet = useMemo(function () {\n    if (provider) {\n      return new (provider.adapter || Wallet)(providerUrl, endpoint);\n    }\n  }, [provider, providerUrl, endpoint]);\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    if (wallet) {\n      wallet.on(\"connect\", () => {\n        if (wallet.publicKey) {\n          setConnected(true);\n          const walletPublicKey = wallet.publicKey.toBase58();\n          const keyToDisplay = walletPublicKey.length > 20 ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(walletPublicKey.length - 7, walletPublicKey.length)}` : walletPublicKey;\n          notify({\n            message: \"Wallet update\",\n            description: \"Connected to wallet \" + keyToDisplay\n          });\n        }\n      });\n      wallet.on(\"disconnect\", () => {\n        setConnected(false);\n        notify({\n          message: \"Wallet update\",\n          description: \"Disconnected from wallet\"\n        });\n      });\n    }\n\n    return () => {\n      setConnected(false);\n\n      if (wallet) {\n        wallet.disconnect();\n      }\n    };\n  }, [wallet]);\n  useEffect(() => {\n    if (wallet && autoConnect) {\n      wallet.connect();\n      setAutoConnect(false);\n    }\n\n    return () => {};\n  }, [wallet, autoConnect]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const select = useCallback(() => setIsModalVisible(true), []);\n  const close = useCallback(() => setIsModalVisible(false), []);\n  return /*#__PURE__*/React.createElement(WalletContext.Provider, {\n    value: {\n      wallet,\n      connected,\n      select,\n      provider\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, children, /*#__PURE__*/React.createElement(Modal, {\n    title: \"Select Wallet\",\n    okText: \"Connect\",\n    visible: isModalVisible,\n    okButtonProps: {\n      style: {\n        display: \"none\"\n      }\n    },\n    onCancel: close,\n    width: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, WALLET_PROVIDERS.map(provider => {\n    const onClick = function () {\n      setProviderUrl(provider.url);\n      setAutoConnect(true);\n      close();\n    };\n\n    return /*#__PURE__*/React.createElement(Button, {\n      size: \"large\",\n      type: providerUrl === provider.url ? \"primary\" : \"ghost\",\n      onClick: onClick,\n      icon: /*#__PURE__*/React.createElement(\"img\", {\n        alt: `${provider.name}`,\n        width: 20,\n        height: 20,\n        src: provider.icon,\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }),\n      style: {\n        display: \"block\",\n        width: \"100%\",\n        textAlign: \"left\",\n        marginBottom: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, provider.name);\n  })));\n}\nexport function useWallet() {\n  const {\n    wallet,\n    connected,\n    provider,\n    select\n  } = useContext(WalletContext);\n  return {\n    wallet,\n    connected,\n    provider,\n    select,\n    publicKey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n\n    connect() {\n      wallet ? wallet.connect() : select();\n    },\n\n    disconnect() {\n      wallet === null || wallet === void 0 ? void 0 : wallet.disconnect();\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/contexts/wallet.tsx"],"names":["Wallet","Button","Modal","React","useCallback","useContext","useEffect","useMemo","useState","notify","useConnectionConfig","useLocalStorageState","LedgerWalletAdapter","SolongWalletAdapter","PhantomWalletAdapter","ASSETS_URL","WALLET_PROVIDERS","name","url","icon","adapter","WalletContext","createContext","wallet","undefined","connected","select","provider","WalletProvider","children","endpoint","autoConnect","setAutoConnect","providerUrl","setProviderUrl","find","setConnected","on","publicKey","walletPublicKey","toBase58","keyToDisplay","length","substring","message","description","disconnect","connect","isModalVisible","setIsModalVisible","close","style","display","map","onClick","marginRight","width","textAlign","marginBottom","useWallet"],"mappings":"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","sourcesContent":["import type { PublicKey } from \"@solana/web3.js\";\n\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Transaction } from \"@solana/web3.js\";\nimport { Button, Modal } from \"antd\";\nimport EventEmitter from \"eventemitter3\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { notify } from \"./../utils/notifications\";\nimport { useConnectionConfig } from \"./connection\";\nimport { useLocalStorageState } from \"./../utils/utils\";\nimport { LedgerWalletAdapter } from \"../wallet-adapters/ledger\";\nimport { SolongWalletAdapter } from \"../wallet-adapters/solong\";\nimport { PhantomWalletAdapter } from \"../wallet-adapters/phantom\";\n\nconst ASSETS_URL =\n  \"https://raw.githubusercontent.com/solana-labs/oyster/main/assets/wallets/\";\nexport const WALLET_PROVIDERS = [\n  {\n    name: \"Sollet\",\n    url: \"https://www.sollet.io\",\n    icon: `${ASSETS_URL}sollet.svg`,\n  },\n  {\n    name: \"Solong\",\n    url: \"https://solongwallet.com\",\n    icon: `${ASSETS_URL}solong.png`,\n    adapter: SolongWalletAdapter,\n  },\n  {\n    name: \"Solflare\",\n    url: \"https://solflare.com/access-wallet\",\n    icon: `${ASSETS_URL}solflare.svg`,\n  },\n  {\n    name: \"MathWallet\",\n    url: \"https://mathwallet.org\",\n    icon: `${ASSETS_URL}mathwallet.svg`,\n  },\n  {\n    name: \"Ledger\",\n    url: \"https://www.ledger.com\",\n    icon: `${ASSETS_URL}ledger.svg`,\n    adapter: LedgerWalletAdapter,\n  },\n  {\n    name: \"Phantom\",\n    url: \"https://phantom.app/\",\n    icon: `https://raydium.io/_nuxt/img/phantom.d9e3c61.png`,\n    adapter: PhantomWalletAdapter,\n  },\n];\n\nexport interface WalletAdapter extends EventEmitter {\n  publicKey: PublicKey | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  connect: () => any;\n  disconnect: () => any;\n}\n\nconst WalletContext = React.createContext<{\n  wallet: WalletAdapter | undefined;\n  connected: boolean;\n  select: () => void;\n  provider: typeof WALLET_PROVIDERS[number] | undefined;\n}>({\n  wallet: undefined,\n  connected: false,\n  select() {},\n  provider: undefined,\n});\n\nexport function WalletProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n\n  const [autoConnect, setAutoConnect] = useState(false);\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\"walletProvider\");\n\n  const provider = useMemo(\n    () => WALLET_PROVIDERS.find(({ url }) => url === providerUrl),\n    [providerUrl]\n  );\n\n  const wallet = useMemo(\n    function () {\n      if (provider) {\n        return new (provider.adapter || Wallet)(\n          providerUrl,\n          endpoint\n        ) as WalletAdapter;\n      }\n    },\n    [provider, providerUrl, endpoint]\n  );\n\n  const [connected, setConnected] = useState(false);\n\n  useEffect(() => {\n    if (wallet) {\n      wallet.on(\"connect\", () => {\n        if (wallet.publicKey) {\n          setConnected(true);\n          const walletPublicKey = wallet.publicKey.toBase58();\n          const keyToDisplay =\n            walletPublicKey.length > 20\n              ? `${walletPublicKey.substring(\n                  0,\n                  7\n                )}.....${walletPublicKey.substring(\n                  walletPublicKey.length - 7,\n                  walletPublicKey.length\n                )}`\n              : walletPublicKey;\n\n          notify({\n            message: \"Wallet update\",\n            description: \"Connected to wallet \" + keyToDisplay,\n          });\n        }\n      });\n\n      wallet.on(\"disconnect\", () => {\n        setConnected(false);\n        notify({\n          message: \"Wallet update\",\n          description: \"Disconnected from wallet\",\n        });\n      });\n    }\n\n    return () => {\n      setConnected(false);\n      if (wallet) {\n        wallet.disconnect();\n      }\n    };\n  }, [wallet]);\n\n  useEffect(() => {\n    if (wallet && autoConnect) {\n      wallet.connect();\n      setAutoConnect(false);\n    }\n\n    return () => {};\n  }, [wallet, autoConnect]);\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const select = useCallback(() => setIsModalVisible(true), []);\n  const close = useCallback(() => setIsModalVisible(false), []);\n\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        connected,\n        select,\n        provider,\n      }}\n    >\n      {children}\n      <Modal\n        title=\"Select Wallet\"\n        okText=\"Connect\"\n        visible={isModalVisible}\n        okButtonProps={{ style: { display: \"none\" } }}\n        onCancel={close}\n        width={400}\n      >\n        {WALLET_PROVIDERS.map((provider) => {\n          const onClick = function () {\n            setProviderUrl(provider.url);\n            setAutoConnect(true);\n            close();\n          };\n\n          return (\n            <Button\n              size=\"large\"\n              type={providerUrl === provider.url ? \"primary\" : \"ghost\"}\n              onClick={onClick}\n              icon={\n                <img\n                  alt={`${provider.name}`}\n                  width={20}\n                  height={20}\n                  src={provider.icon}\n                  style={{ marginRight: 8 }}\n                />\n              }\n              style={{\n                display: \"block\",\n                width: \"100%\",\n                textAlign: \"left\",\n                marginBottom: 8,\n              }}\n            >\n              {provider.name}\n            </Button>\n          );\n        })}\n      </Modal>\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const { wallet, connected, provider, select } = useContext(WalletContext);\n  return {\n    wallet,\n    connected,\n    provider,\n    select,\n    publicKey: wallet?.publicKey,\n    connect() {\n      wallet ? wallet.connect() : select();\n    },\n    disconnect() {\n      wallet?.disconnect();\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}