{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { notify } from \"../../utils/notifications\";\nimport { getPublicKey, signTransaction } from \"./core\";\nexport class LedgerWalletAdapter extends EventEmitter {\n  constructor() {\n    super();\n    this._connecting = void 0;\n    this._publicKey = void 0;\n    this._transport = void 0;\n    this._connecting = false;\n    this._publicKey = null;\n    this._transport = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  async signTransaction(transaction) {\n    if (!this._transport || !this._publicKey) {\n      throw new Error(\"Not connected to Ledger\");\n    } // @TODO: account selection (derivation path changes with account)\n\n\n    const signature = await signTransaction(this._transport, transaction);\n    transaction.addSignature(this._publicKey, signature);\n    return transaction;\n  }\n\n  async connect() {\n    if (this._connecting) {\n      return;\n    }\n\n    this._connecting = true;\n\n    try {\n      // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)\n      this._transport = await TransportWebUSB.create(); // @TODO: account selection\n\n      this._publicKey = await getPublicKey(this._transport);\n      this.emit(\"connect\", this._publicKey);\n    } catch (error) {\n      notify({\n        message: \"Ledger Error\",\n        description: error.message\n      });\n      await this.disconnect();\n    } finally {\n      this._connecting = false;\n    }\n  }\n\n  async disconnect() {\n    let emit = false;\n\n    if (this._transport) {\n      await this._transport.close();\n      this._transport = null;\n      emit = true;\n    }\n\n    this._connecting = false;\n    this._publicKey = null;\n\n    if (emit) {\n      this.emit(\"disconnect\");\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/wallet-adapters/ledger/index.tsx"],"names":["EventEmitter","TransportWebUSB","notify","getPublicKey","signTransaction","LedgerWalletAdapter","constructor","_connecting","_publicKey","_transport","publicKey","transaction","Error","signature","addSignature","connect","create","emit","error","message","description","disconnect","close"],"mappings":"AAGA,OAAOA,YAAP,MAAyB,eAAzB;AAEA,OAAOC,eAAP,MAA4B,+BAA5B;AAEA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,QAA9C;AAEA,OAAO,MAAMC,mBAAN,SAAkCL,YAAlC,CAAwE;AAK7EM,EAAAA,WAAW,GAAG;AACZ;AADY,SAJdC,WAIc;AAAA,SAHdC,UAGc;AAAA,SAFdC,UAEc;AAEZ,SAAKF,WAAL,GAAmB,KAAnB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACD;;AAED,MAAIC,SAAJ,GAAgB;AACd,WAAO,KAAKF,UAAZ;AACD;;AAED,QAAMJ,eAAN,CAAsBO,WAAtB,EAAgD;AAC9C,QAAI,CAAC,KAAKF,UAAN,IAAoB,CAAC,KAAKD,UAA9B,EAA0C;AACxC,YAAM,IAAII,KAAJ,CAAU,yBAAV,CAAN;AACD,KAH6C,CAK9C;;;AACA,UAAMC,SAAS,GAAG,MAAMT,eAAe,CAAC,KAAKK,UAAN,EAAkBE,WAAlB,CAAvC;AAEAA,IAAAA,WAAW,CAACG,YAAZ,CAAyB,KAAKN,UAA9B,EAA0CK,SAA1C;AAEA,WAAOF,WAAP;AACD;;AAED,QAAMI,OAAN,GAAgB;AACd,QAAI,KAAKR,WAAT,EAAsB;AACpB;AACD;;AAED,SAAKA,WAAL,GAAmB,IAAnB;;AAEA,QAAI;AACF;AACA,WAAKE,UAAL,GAAkB,MAAMR,eAAe,CAACe,MAAhB,EAAxB,CAFE,CAGF;;AACA,WAAKR,UAAL,GAAkB,MAAML,YAAY,CAAC,KAAKM,UAAN,CAApC;AACA,WAAKQ,IAAL,CAAU,SAAV,EAAqB,KAAKT,UAA1B;AACD,KAND,CAME,OAAOU,KAAP,EAAc;AACdhB,MAAAA,MAAM,CAAC;AACLiB,QAAAA,OAAO,EAAE,cADJ;AAELC,QAAAA,WAAW,EAAEF,KAAK,CAACC;AAFd,OAAD,CAAN;AAIA,YAAM,KAAKE,UAAL,EAAN;AACD,KAZD,SAYU;AACR,WAAKd,WAAL,GAAmB,KAAnB;AACD;AACF;;AAED,QAAMc,UAAN,GAAmB;AACjB,QAAIJ,IAAI,GAAG,KAAX;;AACA,QAAI,KAAKR,UAAT,EAAqB;AACnB,YAAM,KAAKA,UAAL,CAAgBa,KAAhB,EAAN;AACA,WAAKb,UAAL,GAAkB,IAAlB;AACAQ,MAAAA,IAAI,GAAG,IAAP;AACD;;AAED,SAAKV,WAAL,GAAmB,KAAnB;AACA,SAAKC,UAAL,GAAkB,IAAlB;;AAEA,QAAIS,IAAJ,EAAU;AACR,WAAKA,IAAL,CAAU,YAAV;AACD;AACF;;AAnE4E","sourcesContent":["import type Transport from \"@ledgerhq/hw-transport\";\nimport type { Transaction } from \"@solana/web3.js\";\n\nimport EventEmitter from \"eventemitter3\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { WalletAdapter } from \"../../contexts/wallet\";\nimport { notify } from \"../../utils/notifications\";\nimport { getPublicKey, signTransaction } from \"./core\";\n\nexport class LedgerWalletAdapter extends EventEmitter implements WalletAdapter {\n  _connecting: boolean;\n  _publicKey: PublicKey | null;\n  _transport: Transport | null;\n\n  constructor() {\n    super();\n    this._connecting = false;\n    this._publicKey = null;\n    this._transport = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    if (!this._transport || !this._publicKey) {\n      throw new Error(\"Not connected to Ledger\");\n    }\n\n    // @TODO: account selection (derivation path changes with account)\n    const signature = await signTransaction(this._transport, transaction);\n\n    transaction.addSignature(this._publicKey, signature);\n\n    return transaction;\n  }\n\n  async connect() {\n    if (this._connecting) {\n      return;\n    }\n\n    this._connecting = true;\n\n    try {\n      // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)\n      this._transport = await TransportWebUSB.create();\n      // @TODO: account selection\n      this._publicKey = await getPublicKey(this._transport);\n      this.emit(\"connect\", this._publicKey);\n    } catch (error) {\n      notify({\n        message: \"Ledger Error\",\n        description: error.message,\n      });\n      await this.disconnect();\n    } finally {\n      this._connecting = false;\n    }\n  }\n\n  async disconnect() {\n    let emit = false;\n    if (this._transport) {\n      await this._transport.close();\n      this._transport = null;\n      emit = true;\n    }\n\n    this._connecting = false;\n    this._publicKey = null;\n\n    if (emit) {\n      this.emit(\"disconnect\");\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}