{"ast":null,"code":"import { useEffect, useMemo, useState } from \"react\";\nimport { useMint } from \"../contexts/accounts\";\nimport { useMarkets } from \"../contexts/market\";\nimport { fromLamports } from \"../utils/utils\";\nimport { useUserAccounts } from \"./useUserAccounts\";\nexport function useUserBalance(mintAddress, account) {\n  const mint = useMemo(() => typeof mintAddress === \"string\" ? mintAddress : mintAddress === null || mintAddress === void 0 ? void 0 : mintAddress.toBase58(), [mintAddress]);\n  const {\n    userAccounts\n  } = useUserAccounts();\n  const [balanceInUSD, setBalanceInUSD] = useState(0);\n  const {\n    marketEmitter,\n    midPriceInUSD\n  } = useMarkets();\n  const mintInfo = useMint(mint);\n  const accounts = useMemo(() => {\n    return userAccounts.filter(acc => mint === acc.info.mint.toBase58() && (!account || account.equals(acc.pubkey))).sort((a, b) => b.info.amount.sub(a.info.amount).toNumber());\n  }, [userAccounts, mint, account]);\n  const balanceLamports = useMemo(() => {\n    return accounts.reduce((res, item) => res += item.info.amount.toNumber(), 0);\n  }, [accounts]);\n  const balance = useMemo(() => fromLamports(balanceLamports, mintInfo), [mintInfo, balanceLamports]);\n  useEffect(() => {\n    const updateBalance = () => {\n      setBalanceInUSD(balance * midPriceInUSD(mint || \"\"));\n    };\n\n    const dispose = marketEmitter.onMarket(args => {\n      updateBalance();\n    });\n    updateBalance();\n    return () => {\n      dispose();\n    };\n  }, [balance, midPriceInUSD, marketEmitter, mint, setBalanceInUSD]);\n  return {\n    balance,\n    balanceLamports,\n    balanceInUSD,\n    accounts,\n    hasBalance: accounts.length > 0 && balance > 0\n  };\n}","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/hooks/useUserBalance.ts"],"names":["useEffect","useMemo","useState","useMint","useMarkets","fromLamports","useUserAccounts","useUserBalance","mintAddress","account","mint","toBase58","userAccounts","balanceInUSD","setBalanceInUSD","marketEmitter","midPriceInUSD","mintInfo","accounts","filter","acc","info","equals","pubkey","sort","a","b","amount","sub","toNumber","balanceLamports","reduce","res","item","balance","updateBalance","dispose","onMarket","args","hasBalance","length"],"mappings":"AACA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,SAASC,cAAT,CACLC,WADK,EAELC,OAFK,EAGL;AACA,QAAMC,IAAI,GAAGT,OAAO,CAClB,MACE,OAAOO,WAAP,KAAuB,QAAvB,GAAkCA,WAAlC,GAAgDA,WAAhD,aAAgDA,WAAhD,uBAAgDA,WAAW,CAAEG,QAAb,EAFhC,EAGlB,CAACH,WAAD,CAHkB,CAApB;AAKA,QAAM;AAAEI,IAAAA;AAAF,MAAmBN,eAAe,EAAxC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM;AAAEa,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAmCZ,UAAU,EAAnD;AAEA,QAAMa,QAAQ,GAAGd,OAAO,CAACO,IAAD,CAAxB;AACA,QAAMQ,QAAQ,GAAGjB,OAAO,CAAC,MAAM;AAC7B,WAAOW,YAAY,CAChBO,MADI,CAEFC,GAAD,IACEV,IAAI,KAAKU,GAAG,CAACC,IAAJ,CAASX,IAAT,CAAcC,QAAd,EAAT,KACC,CAACF,OAAD,IAAYA,OAAO,CAACa,MAAR,CAAeF,GAAG,CAACG,MAAnB,CADb,CAHC,EAMJC,IANI,CAMC,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACL,IAAF,CAAOM,MAAP,CAAcC,GAAd,CAAkBH,CAAC,CAACJ,IAAF,CAAOM,MAAzB,EAAiCE,QAAjC,EANX,CAAP;AAOD,GARuB,EAQrB,CAACjB,YAAD,EAAeF,IAAf,EAAqBD,OAArB,CARqB,CAAxB;AAUA,QAAMqB,eAAe,GAAG7B,OAAO,CAAC,MAAM;AACpC,WAAOiB,QAAQ,CAACa,MAAT,CACL,CAACC,GAAD,EAAMC,IAAN,KAAgBD,GAAG,IAAIC,IAAI,CAACZ,IAAL,CAAUM,MAAV,CAAiBE,QAAjB,EADlB,EAEL,CAFK,CAAP;AAID,GAL8B,EAK5B,CAACX,QAAD,CAL4B,CAA/B;AAOA,QAAMgB,OAAO,GAAGjC,OAAO,CAAC,MAAMI,YAAY,CAACyB,eAAD,EAAkBb,QAAlB,CAAnB,EAAgD,CACrEA,QADqE,EAErEa,eAFqE,CAAhD,CAAvB;AAKA9B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmC,aAAa,GAAG,MAAM;AAC1BrB,MAAAA,eAAe,CAACoB,OAAO,GAAGlB,aAAa,CAACN,IAAI,IAAI,EAAT,CAAxB,CAAf;AACD,KAFD;;AAIA,UAAM0B,OAAO,GAAGrB,aAAa,CAACsB,QAAd,CAAwBC,IAAD,IAAU;AAC/CH,MAAAA,aAAa;AACd,KAFe,CAAhB;AAIAA,IAAAA,aAAa;AAEb,WAAO,MAAM;AACXC,MAAAA,OAAO;AACR,KAFD;AAGD,GAdQ,EAcN,CAACF,OAAD,EAAUlB,aAAV,EAAyBD,aAAzB,EAAwCL,IAAxC,EAA8CI,eAA9C,CAdM,CAAT;AAgBA,SAAO;AACLoB,IAAAA,OADK;AAELJ,IAAAA,eAFK;AAGLjB,IAAAA,YAHK;AAILK,IAAAA,QAJK;AAKLqB,IAAAA,UAAU,EAAErB,QAAQ,CAACsB,MAAT,GAAkB,CAAlB,IAAuBN,OAAO,GAAG;AALxC,GAAP;AAOD","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useMint } from \"../contexts/accounts\";\nimport { useMarkets } from \"../contexts/market\";\nimport { fromLamports } from \"../utils/utils\";\nimport { useUserAccounts } from \"./useUserAccounts\";\n\nexport function useUserBalance(\n  mintAddress?: PublicKey | string,\n  account?: PublicKey\n) {\n  const mint = useMemo(\n    () =>\n      typeof mintAddress === \"string\" ? mintAddress : mintAddress?.toBase58(),\n    [mintAddress]\n  );\n  const { userAccounts } = useUserAccounts();\n  const [balanceInUSD, setBalanceInUSD] = useState(0);\n  const { marketEmitter, midPriceInUSD } = useMarkets();\n\n  const mintInfo = useMint(mint);\n  const accounts = useMemo(() => {\n    return userAccounts\n      .filter(\n        (acc) =>\n          mint === acc.info.mint.toBase58() &&\n          (!account || account.equals(acc.pubkey))\n      )\n      .sort((a, b) => b.info.amount.sub(a.info.amount).toNumber());\n  }, [userAccounts, mint, account]);\n\n  const balanceLamports = useMemo(() => {\n    return accounts.reduce(\n      (res, item) => (res += item.info.amount.toNumber()),\n      0\n    );\n  }, [accounts]);\n\n  const balance = useMemo(() => fromLamports(balanceLamports, mintInfo), [\n    mintInfo,\n    balanceLamports,\n  ]);\n\n  useEffect(() => {\n    const updateBalance = () => {\n      setBalanceInUSD(balance * midPriceInUSD(mint || \"\"));\n    };\n\n    const dispose = marketEmitter.onMarket((args) => {\n      updateBalance();\n    });\n\n    updateBalance();\n\n    return () => {\n      dispose();\n    };\n  }, [balance, midPriceInUSD, marketEmitter, mint, setBalanceInUSD]);\n\n  return {\n    balance,\n    balanceLamports,\n    balanceInUSD,\n    accounts,\n    hasBalance: accounts.length > 0 && balance > 0,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}