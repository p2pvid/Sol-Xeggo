{"ast":null,"code":"var _jsxFileName = \"/home/ankit/solana/dapp-scaffold/src/components/ConnectButton/index.tsx\";\nimport { Button, Dropdown, Menu } from \"antd\";\nimport React from \"react\";\nimport { LABELS } from \"../../constants\";\nimport { useWallet } from \"../../contexts/wallet\";\nexport const ConnectButton = props => {\n  const {\n    connected,\n    connect,\n    select,\n    provider\n  } = useWallet();\n  const {\n    onClick,\n    children,\n    disabled,\n    allowWalletChange,\n    ...rest\n  } = props; // only show if wallet selected or user connected\n\n  const menu = /*#__PURE__*/React.createElement(Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Menu.Item, {\n    key: \"3\",\n    onClick: select,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Change Wallet\"));\n\n  if (!provider || !allowWalletChange) {\n    return /*#__PURE__*/React.createElement(Button, Object.assign({}, rest, {\n      onClick: connected ? onClick : connect,\n      disabled: connected && disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }), connected ? props.children : LABELS.CONNECT_LABEL);\n  }\n\n  return /*#__PURE__*/React.createElement(Dropdown.Button, {\n    onClick: connected ? onClick : connect,\n    disabled: connected && disabled,\n    overlay: menu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, LABELS.CONNECT_LABEL);\n};","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/components/ConnectButton/index.tsx"],"names":["Button","Dropdown","Menu","React","LABELS","useWallet","ConnectButton","props","connected","connect","select","provider","onClick","children","disabled","allowWalletChange","rest","menu","CONNECT_LABEL"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,IAA3B,QAAuC,MAAvC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAQA,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAA+B;AAC1D,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA,MAAtB;AAA8BC,IAAAA;AAA9B,MAA2CN,SAAS,EAA1D;AACA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA,iBAA/B;AAAkD,OAAGC;AAArD,MAA8DT,KAApE,CAF0D,CAI1D;;AAEA,QAAMU,IAAI,gBACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,GAAG,EAAC,GAAf;AAAmB,IAAA,OAAO,EAAEP,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CADF;;AAQA,MAAI,CAACC,QAAD,IAAa,CAACI,iBAAlB,EAAqC;AACnC,wBACE,oBAAC,MAAD,oBACMC,IADN;AAEE,MAAA,OAAO,EAAER,SAAS,GAAGI,OAAH,GAAaH,OAFjC;AAGE,MAAA,QAAQ,EAAED,SAAS,IAAIM,QAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKGN,SAAS,GAAGD,KAAK,CAACM,QAAT,GAAoBT,MAAM,CAACc,aALvC,CADF;AASD;;AAED,sBACE,oBAAC,QAAD,CAAU,MAAV;AACE,IAAA,OAAO,EAAEV,SAAS,GAAGI,OAAH,GAAaH,OADjC;AAEE,IAAA,QAAQ,EAAED,SAAS,IAAIM,QAFzB;AAGE,IAAA,OAAO,EAAEG,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGb,MAAM,CAACc,aALV,CADF;AASD,CAnCM","sourcesContent":["import { Button, Dropdown, Menu } from \"antd\";\nimport { ButtonProps } from \"antd/lib/button\";\nimport React from \"react\";\nimport { LABELS } from \"../../constants\";\nimport { useWallet } from \"../../contexts/wallet\";\n\nexport interface ConnectButtonProps\n  extends ButtonProps,\n    React.RefAttributes<HTMLElement> {\n  allowWalletChange?: boolean;\n}\n\nexport const ConnectButton = (props: ConnectButtonProps) => {\n  const { connected, connect, select, provider } = useWallet();\n  const { onClick, children, disabled, allowWalletChange, ...rest } = props;\n\n  // only show if wallet selected or user connected\n\n  const menu = (\n    <Menu>\n      <Menu.Item key=\"3\" onClick={select}>\n        Change Wallet\n      </Menu.Item>\n    </Menu>\n  );\n\n  if (!provider || !allowWalletChange) {\n    return (\n      <Button\n        {...rest}\n        onClick={connected ? onClick : connect}\n        disabled={connected && disabled}\n      >\n        {connected ? props.children : LABELS.CONNECT_LABEL}\n      </Button>\n    );\n  }\n\n  return (\n    <Dropdown.Button\n      onClick={connected ? onClick : connect}\n      disabled={connected && disabled}\n      overlay={menu}\n    >\n      {LABELS.CONNECT_LABEL}\n    </Dropdown.Button>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}