{"ast":null,"code":"import { EventEmitter as Emitter } from \"eventemitter3\";\nexport class CacheUpdateEvent {\n  constructor(id, isNew, parser) {\n    this.id = void 0;\n    this.parser = void 0;\n    this.isNew = void 0;\n    this.id = id;\n    this.parser = parser;\n    this.isNew = isNew;\n  }\n\n}\nCacheUpdateEvent.type = \"CacheUpdate\";\nexport class CacheDeleteEvent {\n  constructor(id) {\n    this.id = void 0;\n    this.id = id;\n  }\n\n}\nCacheDeleteEvent.type = \"CacheUpdate\";\nexport class MarketUpdateEvent {\n  constructor(ids) {\n    this.ids = void 0;\n    this.ids = ids;\n  }\n\n}\nMarketUpdateEvent.type = \"MarketUpdate\";\nexport class CacheClearEvent {}\nCacheClearEvent.type = \"CacheDelete\";\nexport class EventEmitter {\n  constructor() {\n    this.emitter = new Emitter();\n  }\n\n  onMarket(callback) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onCache(callback) {\n    this.emitter.on(CacheUpdateEvent.type, callback);\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\n  }\n\n  raiseMarketUpdated(ids) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n\n  raiseCacheUpdated(id, isNew, parser) {\n    this.emitter.emit(CacheUpdateEvent.type, new CacheUpdateEvent(id, isNew, parser));\n  }\n\n  raiseCacheDeleted(id) {\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\n  }\n\n  raiseCacheCleared() {\n    this.emitter.emit(CacheClearEvent.type, new CacheClearEvent());\n  }\n\n}","map":{"version":3,"sources":["/home/ankit/solana/dapp-scaffold/src/utils/eventEmitter.ts"],"names":["EventEmitter","Emitter","CacheUpdateEvent","constructor","id","isNew","parser","type","CacheDeleteEvent","MarketUpdateEvent","ids","CacheClearEvent","emitter","onMarket","callback","on","removeListener","onCache","raiseMarketUpdated","emit","raiseCacheUpdated","raiseCacheDeleted","raiseCacheCleared"],"mappings":"AAAA,SAASA,YAAY,IAAIC,OAAzB,QAAwC,eAAxC;AAEA,OAAO,MAAMC,gBAAN,CAAuB;AAK5BC,EAAAA,WAAW,CAACC,EAAD,EAAaC,KAAb,EAA6BC,MAA7B,EAA0C;AAAA,SAHrDF,EAGqD;AAAA,SAFrDE,MAEqD;AAAA,SADrDD,KACqD;AACnD,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKD,KAAL,GAAaA,KAAb;AACD;;AAT2B;AAAjBH,gB,CACJK,I,GAAO,a;AAWhB,OAAO,MAAMC,gBAAN,CAAuB;AAG5BL,EAAAA,WAAW,CAACC,EAAD,EAAa;AAAA,SADxBA,EACwB;AACtB,SAAKA,EAAL,GAAUA,EAAV;AACD;;AAL2B;AAAjBI,gB,CACJD,I,GAAO,a;AAOhB,OAAO,MAAME,iBAAN,CAAwB;AAG7BN,EAAAA,WAAW,CAACO,GAAD,EAAmB;AAAA,SAD9BA,GAC8B;AAC5B,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAL4B;AAAlBD,iB,CACJF,I,GAAO,c;AAOhB,OAAO,MAAMI,eAAN,CAAsB;AAAhBA,e,CACJJ,I,GAAO,a;AAGhB,OAAO,MAAMP,YAAN,CAAmB;AAAA;AAAA,SAChBY,OADgB,GACN,IAAIX,OAAJ,EADM;AAAA;;AAGxBY,EAAAA,QAAQ,CAACC,QAAD,EAA8C;AACpD,SAAKF,OAAL,CAAaG,EAAb,CAAgBN,iBAAiB,CAACF,IAAlC,EAAwCO,QAAxC;AAEA,WAAO,MAAM,KAAKF,OAAL,CAAaI,cAAb,CAA4BP,iBAAiB,CAACF,IAA9C,EAAoDO,QAApD,CAAb;AACD;;AAEDG,EAAAA,OAAO,CAACH,QAAD,EAA6C;AAClD,SAAKF,OAAL,CAAaG,EAAb,CAAgBb,gBAAgB,CAACK,IAAjC,EAAuCO,QAAvC;AAEA,WAAO,MAAM,KAAKF,OAAL,CAAaI,cAAb,CAA4Bd,gBAAgB,CAACK,IAA7C,EAAmDO,QAAnD,CAAb;AACD;;AAEDI,EAAAA,kBAAkB,CAACR,GAAD,EAAmB;AACnC,SAAKE,OAAL,CAAaO,IAAb,CAAkBV,iBAAiB,CAACF,IAApC,EAA0C,IAAIE,iBAAJ,CAAsBC,GAAtB,CAA1C;AACD;;AAEDU,EAAAA,iBAAiB,CAAChB,EAAD,EAAaC,KAAb,EAA6BC,MAA7B,EAA0C;AACzD,SAAKM,OAAL,CAAaO,IAAb,CACEjB,gBAAgB,CAACK,IADnB,EAEE,IAAIL,gBAAJ,CAAqBE,EAArB,EAAyBC,KAAzB,EAAgCC,MAAhC,CAFF;AAID;;AAEDe,EAAAA,iBAAiB,CAACjB,EAAD,EAAa;AAC5B,SAAKQ,OAAL,CAAaO,IAAb,CAAkBX,gBAAgB,CAACD,IAAnC,EAAyC,IAAIC,gBAAJ,CAAqBJ,EAArB,CAAzC;AACD;;AAEDkB,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,OAAL,CAAaO,IAAb,CAAkBR,eAAe,CAACJ,IAAlC,EAAwC,IAAII,eAAJ,EAAxC;AACD;;AAhCuB","sourcesContent":["import { EventEmitter as Emitter } from \"eventemitter3\";\n\nexport class CacheUpdateEvent {\n  static type = \"CacheUpdate\";\n  id: string;\n  parser: any;\n  isNew: boolean;\n  constructor(id: string, isNew: boolean, parser: any) {\n    this.id = id;\n    this.parser = parser;\n    this.isNew = isNew;\n  }\n}\n\nexport class CacheDeleteEvent {\n  static type = \"CacheUpdate\";\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = \"MarketUpdate\";\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class CacheClearEvent {\n  static type = \"CacheDelete\";\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onCache(callback: (args: CacheUpdateEvent) => void) {\n    this.emitter.on(CacheUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n\n  raiseCacheUpdated(id: string, isNew: boolean, parser: any) {\n    this.emitter.emit(\n      CacheUpdateEvent.type,\n      new CacheUpdateEvent(id, isNew, parser)\n    );\n  }\n\n  raiseCacheDeleted(id: string) {\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\n  }\n\n  raiseCacheCleared() {\n    this.emitter.emit(CacheClearEvent.type, new CacheClearEvent());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}